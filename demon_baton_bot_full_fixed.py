import asyncio
import random
from datetime import datetime, timedelta
from enum import Enum
import json
import logging
import os
from typing import List, Dict, Optional
import math

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from sqlalchemy import create_engine, Column, Integer, String, ForeignKey, DateTime, Boolean, Float, JSON
from sqlalchemy.orm import sessionmaker, declarative_base, relationship

# –ò–º–ø–æ—Ä—Ç –∏–∑ –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from config import (
    API_TOKEN,
    DATABASE_URL,
    ADMIN_IDS,
    CURRENT_USER,
    CURRENT_DATE,
    MAX_LEVEL,
    BASE_EXP_MULTIPLIER,
    ENERGY_REGEN_RATE,
    MAX_INVENTORY_SLOTS
)
from states import GameStates

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOG_FILENAME = f"logs/bot_{datetime.now().strftime('%Y-%m-%d')}.log"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if not os.path.exists('logs'):
    os.makedirs('logs')

logging.basicConfig(
    level=logging.INFO,
    format=f'%(asctime)s - User: dimik98330 - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(LOG_FILENAME, encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
Base = declarative_base()
engine = create_engine(DATABASE_URL, echo=True)  # echo=True –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ SQL –∑–∞–ø—Ä–æ—Å–æ–≤
Session = sessionmaker(bind=engine)
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–≥—Ä—ã
ENERGY_REGEN_RATE = 1  # —ç–Ω–µ—Ä–≥–∏—è –≤ –º–∏–Ω—É—Ç—É
MAX_INVENTORY_SLOTS = 50
HEALTH_REGEN_RATE = 5  # –∑–¥–æ—Ä–æ–≤—å–µ –≤ –º–∏–Ω—É—Ç—É
EXPERIENCE_MULTIPLIER = 1.5
BASE_ENERGY_COST = 5
BASE_HEALTH_COST = 10


# –ò–≥—Ä–æ–≤—ã–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è
class ItemType(str, Enum):
    WEAPON = "weapon"
    ARMOR = "armor"
    HELMET = "helmet"
    BOOTS = "boots"
    AMULET = "amulet"
    RING = "ring"
    POTION = "potion"
    QUEST_ITEM = "quest_item"
    MATERIAL = "material"


class ItemRarity(str, Enum):
    COMMON = "common"
    UNCOMMON = "uncommon"
    RARE = "rare"
    EPIC = "epic"
    LEGENDARY = "legendary"
    MYTHICAL = "mythical"


class QuestType(str, Enum):
    KILL_MONSTERS = "kill_monsters"
    COLLECT_ITEMS = "collect_items"
    CRAFT_ITEMS = "craft_items"
    WIN_PVP = "win_pvp"
    COMPLETE_DUNGEON = "complete_dungeon"


class AchievementType(str, Enum):
    MONSTER_KILLS = "monster_kills"
    ITEMS_COLLECTED = "items_collected"
    QUESTS_COMPLETED = "quests_completed"
    PVP_WINS = "pvp_wins"
    DUNGEONS_COMPLETED = "dungeons_completed"
    ITEMS_CRAFTED = "items_crafted"


class BattleType(str, Enum):
    PVE = "pve"
    PVP = "pvp"
    DUNGEON = "dungeon"
    BOSS = "boss"
    EVENT = "event"


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã
def admin_required(func):
    async def wrapper(message: types.Message, *args, **kwargs):
        if message.from_user.id not in ADMIN_IDS:
            await message.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
            logger.warning(f"Unauthorized access attempt by user {message.from_user.id}")
            return
        return await func(message, *args, **kwargs)

    return wrapper


def energy_required(amount: int):
    def decorator(func):
        async def wrapper(message: types.Message, *args, **kwargs):
            session = Session()
            try:
                player = session.query(Player).filter_by(user_id=message.from_user.id).first()

                if not player or player.energy < amount:
                    await message.reply(f"‚ö° –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏! –¢—Ä–µ–±—É–µ—Ç—Å—è: {amount}")
                    logger.info(f"User {message.from_user.id} - insufficient energy for action")
                    return

                return await func(message, *args, **kwargs)
            finally:
                session.close()

        return wrapper

    return decorator


# –°–ª—É–∂–µ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def calculate_level_exp(level: int) -> int:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–ø—ã—Ç, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è"""
    return int(BASE_EXP_MULTIPLIER * (level ** EXPERIENCE_MULTIPLIER))


def format_duration(seconds: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    minutes, seconds = divmod(seconds, 60)
    hours, minutes = divmod(minutes, 60)
    parts = []
    if hours > 0:
        parts.append(f"{hours}—á")
    if minutes > 0:
        parts.append(f"{minutes}–º")
    if seconds > 0 or not parts:
        parts.append(f"{seconds}—Å")
    return " ".join(parts)


def get_item_rarity_color(rarity: ItemRarity) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è —Ä–µ–¥–∫–æ—Å—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç–∞"""
    colors = {
        ItemRarity.COMMON: "‚ö™",
        ItemRarity.UNCOMMON: "üü¢",
        ItemRarity.RARE: "üîµ",
        ItemRarity.EPIC: "üü£",
        ItemRarity.LEGENDARY: "üü°",
        ItemRarity.MYTHICAL: "üî¥"
    }
    return colors.get(rarity, "‚ö™")


def calculate_damage(base_damage: int, level: int, buffs: Dict = None) -> int:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π —É—Ä–æ–Ω —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è –∏ –±–∞—Ñ—Ñ–æ–≤"""
    damage = base_damage * (1 + level * 0.1)
    if buffs:
        damage *= (1 + buffs.get('damage_multiplier', 0))
    return int(damage)


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–µ–º
def get_time_diff(last_time: datetime) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–Ω–∏—Ü—É –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
    now = CURRENT_DATE
    return int((now - last_time).total_seconds())


def calculate_energy_restore(last_restore: datetime) -> int:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é —ç–Ω–µ—Ä–≥–∏—é"""
    seconds_passed = get_time_diff(last_restore)
    return int(seconds_passed * (ENERGY_REGEN_RATE / 60))


def calculate_health_restore(last_restore: datetime) -> int:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ"""
    seconds_passed = get_time_diff(last_restore)
    return int(seconds_passed * (HEALTH_REGEN_RATE / 60))


# –ú–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
# noinspection Annotator
class Player(Base):
    __tablename__ = 'players'
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, unique=True)
    name = Column(String)
    level = Column(Integer, default=1)
    experience = Column(Integer, default=0)
    batons = Column(Integer, default=100)
    premium_currency = Column(Integer, default=0)
    strength = Column(Integer, default=10)
    agility = Column(Integer, default=10)
    intelligence = Column(Integer, default=10)
    vitality = Column(Integer, default=10)
    energy = Column(Integer, default=100)
    max_energy = Column(Integer, default=100)
    health = Column(Integer, default=100)
    max_health = Column(Integer, default=100)
    last_daily = Column(DateTime, nullable=True)
    last_energy_regen = Column(DateTime, default=datetime.utcnow)
    last_health_regen = Column(DateTime, default=datetime.utcnow)
    clan_id = Column(Integer, ForeignKey('clans.id'), nullable=True)
    rank = Column(String, default="–ù–æ–≤–∏—á–æ–∫")
    pvp_rating = Column(Integer, default=1000)
    wins = Column(Integer, default=0)
    losses = Column(Integer, default=0)
    quest_points = Column(Integer, default=0)
    achievement_points = Column(Integer, default=0)
    crafting_level = Column(Integer, default=1)
    crafting_experience = Column(Integer, default=0)
    last_location = Column(String, default="town")
    inventory_slots = Column(Integer, default=20)

    # –û—Ç–Ω–æ—à–µ–Ω–∏—è
    equipment = relationship("Equipment", uselist=False, back_populates="player")
    inventory = relationship("Inventory", back_populates="player")
    quests = relationship("PlayerQuest", back_populates="player")
    achievements = relationship("PlayerAchievement", back_populates="player")
    skills = relationship("PlayerSkill", back_populates="player")

    def get_total_stats(self, session) -> Dict[str, int]:
        """–ü–æ–¥—Å—á–µ—Ç –≤—Å–µ—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏–≥—Ä–æ–∫–∞ —Å —É—á–µ—Ç–æ–º —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è –∏ –±–∞—Ñ—Ñ–æ–≤"""
        total_stats = {
            'strength': self.strength,
            'agility': self.agility,
            'intelligence': self.intelligence,
            'vitality': self.vitality,
            'health': self.max_health,
            'energy': self.max_energy,
            'damage': self.strength * 2,
            'defense': self.vitality * 1.5,
            'critical_chance': self.agility * 0.5,
            'dodge_chance': self.agility * 0.3
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å—ã –æ—Ç —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è
        if self.equipment:
            for slot in ['weapon_id', 'armor_id', 'helmet_id', 'boots_id', 'amulet_id', 'ring_id']:
                item_id = getattr(self.equipment, slot)
                if item_id:
                    item = session.query(Item).get(item_id)
                    if item:
                        total_stats['strength'] += item.strength_bonus
                        total_stats['agility'] += item.agility_bonus
                        total_stats['intelligence'] += item.intelligence_bonus
                        total_stats['vitality'] += item.vitality_bonus
                        total_stats['health'] += item.health_bonus
                        total_stats['energy'] += item.energy_bonus
                        total_stats['damage'] += item.damage_bonus
                        total_stats['defense'] += item.defense_bonus

        active_buffs = session.query(PlayerBuff).filter_by(
            player_id=self.id
        ).filter(
            PlayerBuff.expires_at > datetime.utcnow()
        ).all()

        for buff in active_buffs:
            if buff.stat_bonuses:
                for stat, bonus in buff.stat_bonuses.items():
                    if stat in total_stats:
                        total_stats[stat] += bonus

        return total_stats

    def can_equip_item(self, item: "Item") -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —ç–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç"""
        return (
                item.is_equippable and
                self.level >= item.level_required and
                self.strength >= item.strength_required and
                self.agility >= item.agility_required and
                self.intelligence >= item.intelligence_required
        )

    def regenerate_energy(self):
        """–†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–Ω–µ—Ä–≥–∏–∏"""
        now = datetime.utcnow()
        if self.last_energy_regen:
            minutes_passed = (now - self.last_energy_regen).total_seconds() / 60
            energy_gain = int(minutes_passed * ENERGY_REGEN_RATE)
            if energy_gain > 0:
                self.energy = min(self.max_energy, self.energy + energy_gain)
                self.last_energy_regen = now

    def regenerate_health(self):
        """–†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–¥–æ—Ä–æ–≤—å—è"""
        now = datetime.utcnow()
        if self.last_health_regen:
            minutes_passed = (now - self.last_health_regen).total_seconds() / 60
            health_gain = int(minutes_passed * HEALTH_REGEN_RATE)
            if health_gain > 0:
                self.health = min(self.max_health, self.health + health_gain)
                self.last_health_regen = now

    def add_experience(self, amount: int) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è"""
        self.experience += amount
        level_up = False

        while self.experience >= self.get_next_level_exp():
            self.level += 1
            level_up = True
            # –ë–æ–Ω—É—Å—ã –∑–∞ —É—Ä–æ–≤–µ–Ω—å
            self.strength += 2
            self.agility += 2
            self.intelligence += 2
            self.vitality += 2
            self.max_health += 20
            self.max_energy += 10

        return level_up

        def get_next_level_exp(self) -> int:
            """–†–∞—Å—á–µ—Ç –æ–ø—ã—Ç–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è"""
            return int(100 * (self.level ** EXPERIENCE_MULTIPLIER))

    class Item(Base):
        __tablename__ = 'items'
        id = Column(Integer, primary_key=True)
        name = Column(String)
        description = Column(String)
        item_type = Column(String)
        rarity = Column(String)
        level_required = Column(Integer, default=1)
        strength_required = Column(Integer, default=0)
        agility_required = Column(Integer, default=0)
        intelligence_required = Column(Integer, default=0)
        strength_bonus = Column(Integer, default=0)
        agility_bonus = Column(Integer, default=0)
        intelligence_bonus = Column(Integer, default=0)
        vitality_bonus = Column(Integer, default=0)
        health_bonus = Column(Integer, default=0)
        energy_bonus = Column(Integer, default=0)
        damage_bonus = Column(Integer, default=0)
        defense_bonus = Column(Integer, default=0)
        price = Column(Integer)
        sell_price = Column(Integer)
        is_equippable = Column(Boolean, default=False)
        is_tradeable = Column(Boolean, default=True)
        is_stackable = Column(Boolean, default=False)
        max_stack = Column(Integer, default=1)
        durability = Column(Integer, nullable=True)
        max_durability = Column(Integer, nullable=True)
        effects = Column(JSON, nullable=True)

    class Equipment(Base):
        __tablename__ = 'equipment'
        id = Column(Integer, primary_key=True)
        player_id = Column(Integer, ForeignKey('players.id'))
        weapon_id = Column(Integer, ForeignKey('items.id'), nullable=True)
        armor_id = Column(Integer, ForeignKey('items.id'), nullable=True)
        helmet_id = Column(Integer, ForeignKey('items.id'), nullable=True)
        boots_id = Column(Integer, ForeignKey('items.id'), nullable=True)
        amulet_id = Column(Integer, ForeignKey('items.id'), nullable=True)
        ring_id = Column(Integer, ForeignKey('items.id'), nullable=True)

        player = relationship("Player", back_populates="equipment")
        weapon = relationship("Item", foreign_keys=[weapon_id])
        armor = relationship("Item", foreign_keys=[armor_id])
        helmet = relationship("Item", foreign_keys=[helmet_id])
        boots = relationship("Item", foreign_keys=[boots_id])
        amulet = relationship("Item", foreign_keys=[amulet_id])
        ring = relationship("Item", foreign_keys=[ring_id])

    class Monster(Base):
        __tablename__ = 'monsters'
        id = Column(Integer, primary_key=True)
        name = Column(String)
        description = Column(String)
        level = Column(Integer)
        health = Column(Integer)
        damage = Column(Integer)
        defense = Column(Integer)
        experience_reward = Column(Integer)
        baton_reward_min = Column(Integer)
        baton_reward_max = Column(Integer)
        drop_table = Column(JSON)  # {item_id: drop_chance}
        special_abilities = Column(JSON, nullable=True)
        location = Column(String)
        respawn_time = Column(Integer, default=60)  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        is_boss = Column(Boolean, default=False)
        required_level = Column(Integer, default=1)

    class Dungeon(Base):
        __tablename__ = 'dungeons'
        id = Column(Integer, primary_key=True)
        name = Column(String)
        description = Column(String)
        min_level = Column(Integer)
        max_players = Column(Integer)
        monster_groups = Column(JSON)  # [{monster_id: count}]
        boss_id = Column(Integer, ForeignKey('monsters.id'), nullable=True)
        rewards = Column(JSON)  # {item_id: drop_chance}
        completion_time = Column(Integer)  # –≤ –º–∏–Ω—É—Ç–∞—Ö
        energy_cost = Column(Integer)
        cooldown = Column(Integer)  # –≤ —á–∞—Å–∞—Ö

    class DungeonProgress(Base):
        __tablename__ = 'dungeon_progress'
        id = Column(Integer, primary_key=True)
        player_id = Column(Integer, ForeignKey('players.id'))
        dungeon_id = Column(Integer, ForeignKey('dungeons.id'))
        completed_times = Column(Integer, default=0)
        best_time = Column(Integer, nullable=True)
        last_attempt = Column(DateTime, nullable=True)
        current_progress = Column(JSON, nullable=True)

    class Quest(Base):
        __tablename__ = 'quests'
        id = Column(Integer, primary_key=True)
        name = Column(String)
        description = Column(String)
        quest_type = Column(String)
        min_level = Column(Integer)
        requirements = Column(JSON)  # {monster_kills: count, item_collect: {item_id: count}}
        time_limit = Column(Integer, nullable=True)  # –≤ –º–∏–Ω—É—Ç–∞—Ö
        reward_experience = Column(Integer)
        reward_batons = Column(Integer)
        reward_items = Column(JSON)  # {item_id: count}
        energy_cost = Column(Integer)
        cooldown = Column(Integer)  # –≤ —á–∞—Å–∞—Ö
        is_daily = Column(Boolean, default=False)
        is_repeatable = Column(Boolean, default=False)
        required_quests = Column(JSON)  # [quest_ids]
        story_chapter = Column(Integer, nullable=True)

    class PlayerQuest(Base):
        __tablename__ = 'player_quests'
        id = Column(Integer, primary_key=True)
        player_id = Column(Integer, ForeignKey('players.id'))
        quest_id = Column(Integer, ForeignKey('quests.id'))
        status = Column(String, default='active')  # active, completed, failed
        progress = Column(JSON)  # {requirement_key: current_value}
        started_at = Column(DateTime, default=datetime.utcnow)
        completed_at = Column(DateTime, nullable=True)
        times_completed = Column(Integer, default=0)

    class Achievement(Base):
        __tablename__ = 'achievements'
        id = Column(Integer, primary_key=True)
        name = Column(String)
        description = Column(String)
        achievement_type = Column(String)
        requirements = Column(JSON)  # {type: value}
        reward_title = Column(String, nullable=True)
        reward_batons = Column(Integer)
        reward_items = Column(JSON, nullable=True)
        icon = Column(String, nullable=True)
        points = Column(Integer)

    class PlayerAchievement(Base):
        __tablename__ = 'player_achievements'
        id = Column(Integer, primary_key=True)
        player_id = Column(Integer, ForeignKey('players.id'))
        achievement_id = Column(Integer, ForeignKey('achievements.id'))
        progress = Column(JSON)
        completed = Column(Boolean, default=False)
        completed_at = Column(DateTime, nullable=True)

    class Skill(Base):
        __tablename__ = 'skills'
        id = Column(Integer, primary_key=True)
        name = Column(String)
        description = Column(String)
        skill_type = Column(String)
        max_level = Column(Integer)
        base_damage = Column(Integer, nullable=True)
        energy_cost = Column(Integer)
        cooldown = Column(Integer)  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        effects = Column(JSON, nullable=True)
        requirements = Column(JSON)  # {level: value, strength: value, etc}

    class PlayerSkill(Base):
        __tablename__ = 'player_skills'
        id = Column(Integer, primary_key=True)
        player_id = Column(Integer, ForeignKey('players.id'))
        skill_id = Column(Integer, ForeignKey('skills.id'))
        level = Column(Integer, default=1)
        experience = Column(Integer, default=0)
        last_used = Column(DateTime, nullable=True)

    class Shop(Base):
        __tablename__ = 'shops'
        id = Column(Integer, primary_key=True)
        name = Column(String)
        description = Column(String)
        shop_type = Column(String)  # regular, premium, special
        items = Column(JSON)  # {item_id: {price: value, quantity: value, restock_time: value}}
        refresh_interval = Column(Integer)  # –≤ —á–∞—Å–∞—Ö
        last_refresh = Column(DateTime)
        required_level = Column(Integer, default=1)
        required_reputation = Column(Integer, default=0)

    class PlayerBuff(Base):
        __tablename__ = 'player_buffs'
        id = Column(Integer, primary_key=True)
        player_id = Column(Integer, ForeignKey('players.id'))
        name = Column(String)
        description = Column(String)
        stat_bonuses = Column(JSON)  # {stat: bonus_value}
        duration = Column(Integer)  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        started_at = Column(DateTime, default=datetime.utcnow)
        expires_at = Column(DateTime)

    # –ò–≥—Ä–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    class GameStates(StatesGroup):
        main_menu = State()
        battle = State()
        shop = State()
        inventory = State()
        equipment = State()
        quest = State()
        dungeon = State()
        craft = State()
        trade = State()
        clan = State()
        skills = State()
        achievements = State()
        settings = State()

    # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±–æ–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    async def battle_calculation(player: Player, monster: Monster, session) -> Dict:
        """–†–∞—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–æ—è –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–æ–º –∏ –º–æ–Ω—Å—Ç—Ä–æ–º"""
        player_stats = player.get_total_stats(session)
        battle_log = []

        player_hp = player_stats['health']
        monster_hp = monster.health
        rounds = 0

        while player_hp > 0 and monster_hp > 0 and rounds < 20:
            # –•–æ–¥ –∏–≥—Ä–æ–∫–∞
            player_damage = max(1, player_stats['damage'] - monster.defense // 2)
            crit_chance = random.random() < (player_stats['critical_chance'] / 100)
            if crit_chance:
                player_damage *= 2
                battle_log.append(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä! {player.name} –Ω–∞–Ω–æ—Å–∏—Ç {player_damage} —É—Ä–æ–Ω–∞!")
            else:
                battle_log.append(f"‚öîÔ∏è {player.name} –Ω–∞–Ω–æ—Å–∏—Ç {player_damage} —É—Ä–æ–Ω–∞!")
            monster_hp -= player_damage

            # –•–æ–¥ –º–æ–Ω—Å—Ç—Ä–∞
            if monster_hp > 0:
                monster_damage = max(1, monster.damage - player_stats['defense'] // 2)
                dodge_chance = random.random() < (player_stats['dodge_chance'] / 100)
                if dodge_chance:
                    battle_log.append(f"üåü {player.name} —É–∫–ª–æ–Ω—è–µ—Ç—Å—è –æ—Ç –∞—Ç–∞–∫–∏!")
                else:
                    player_hp -= monster_damage
                    battle_log.append(f"üó°Ô∏è {monster.name} –Ω–∞–Ω–æ—Å–∏—Ç {monster_damage} —É—Ä–æ–Ω–∞!")

            rounds += 1

        victory = player_hp > 0

        return {
            'victory': victory,
            'remaining_hp': player_hp,
            'battle_log': battle_log,
            'rounds': rounds
        }

    async def process_battle_rewards(player: Player, monster: Monster, session):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≥—Ä–∞–¥ –ø–æ—Å–ª–µ –ø–æ–±–µ–¥—ã –Ω–∞–¥ –º–æ–Ω—Å—Ç—Ä–æ–º"""
        exp_reward = monster.experience_reward
        baton_reward = random.randint(monster.baton_reward_min, monster.baton_reward_max)

        level_up = player.add_experience(exp_reward)
        player.batons += baton_reward

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–∞–¥–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        dropped_items = []
        if monster.drop_table:
            for item_id, chance in monster.drop_table.items():
                if random.random() < chance:
                    item = session.query(Item).get(item_id)
                    if item:
                        inventory_item = Inventory(
                            player_id=player.id,
                            item_id=item_id,
                            quantity=1
                        )
                        session.add(inventory_item)
                        dropped_items.append(item.name)

        session.commit()
        return {
            'experience': exp_reward,
            'batons': baton_reward,
            'level_up': level_up,
            'dropped_items': dropped_items
        }

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –±–æ–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    @dp.message_handler(lambda message: message.text == "‚öîÔ∏è –ë–∏—Ç–≤–∞", state=GameStates.main_menu)
    async def handle_battle(message: types.Message, state: FSMContext):
        session = Session()
        player = session.query(Player).filter_by(user_id=message.from_user.id).first()

        if player.energy < 10:
            await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –±–∏—Ç–≤—ã! –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ –æ–Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è.")
            return

        # –í—ã–±–æ—Ä –º–æ–Ω—Å—Ç—Ä–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É—Ä–æ–≤–Ω–µ–º –∏–≥—Ä–æ–∫–∞
        available_monsters = session.query(Monster).filter(
            Monster.required_level <= player.level
        ).all()

        if not available_monsters:
            await message.answer("üîç –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–æ–Ω—Å—Ç—Ä–æ–≤ –¥–ª—è –±–∏—Ç–≤—ã.")
            return

        monster = random.choice(available_monsters)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±–∏—Ç–≤—ã
        battle_keyboard = types.InlineKeyboardMarkup()
        battle_keyboard.add(types.InlineKeyboardButton("‚öîÔ∏è –ê—Ç–∞–∫–æ–≤–∞—Ç—å", callback_data=f"battle_attack_{monster.id}"))
        battle_keyboard.add(types.InlineKeyboardButton("üèÉ –£–±–µ–∂–∞—Ç—å", callback_data="battle_flee"))

        await message.answer(
            f"–í—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ {monster.name}!\n"
            f"–£—Ä–æ–≤–µ–Ω—å: {monster.level}\n"
            f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {monster.health}\n"
            f"‚öîÔ∏è –£—Ä–æ–Ω: {monster.damage}\n"
            f"üõ°Ô∏è –ó–∞—â–∏—Ç–∞: {monster.defense}\n\n"
            f"{monster.description}\n\n"
            "–ß—Ç–æ –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å?",
            reply_markup=battle_keyboard
        )

        await GameStates.battle.set()
        await state.update_data(monster_id=monster.id)

    @dp.callback_query_handler(lambda c: c.data.startswith('battle_'), state=GameStates.battle)
    async def process_battle_action(callback_query: types.CallbackQuery, state: FSMContext):
        session = Session()
        player = session.query(Player).filter_by(user_id=callback_query.from_user.id).first()

        if callback_query.data == "battle_flee":
            energy_loss = 5
            player.energy = max(0, player.energy - energy_loss)
            session.commit()

            await callback_query.message.edit_text(
                f"–í—ã —Å–±–µ–∂–∞–ª–∏ –∏–∑ –±–∏—Ç–≤—ã!\n"
                f"–ü–æ—Ç–µ—Ä—è–Ω–æ {energy_loss} —ç–Ω–µ—Ä–≥–∏–∏."
            )
            await GameStates.main_menu.set()
            return

        data = await state.get_data()
        monster_id = data.get('monster_id')
        monster = session.query(Monster).get(monster_id)

        if not monster:
            await callback_query.message.edit_text("–û—à–∏–±–∫–∞: –º–æ–Ω—Å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await GameStates.main_menu.set()
            return

        # –ü—Ä–æ–≤–æ–¥–∏–º –±–æ–π
        battle_result = await battle_calculation(player, monster, session)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –∏ —ç–Ω–µ—Ä–≥–∏—é –∏–≥—Ä–æ–∫–∞
        player.health = battle_result['remaining_hp']
        player.energy -= 10

        battle_log = "\n".join(battle_result['battle_log'])

        if battle_result['victory']:
            rewards = await process_battle_rewards(player, monster, session)

            reward_text = (
                f"üéâ –ü–æ–±–µ–¥–∞!\n\n"
                f"–ü–æ–ª—É—á–µ–Ω–æ:\n"
                f"‚ú® –û–ø—ã—Ç: {rewards['experience']}\n"
                f"ü•ñ –ë–∞—Ç–æ–Ω—ã: {rewards['batons']}\n"
            )

            if rewards['dropped_items']:
                reward_text += f"üì¶ –ü—Ä–µ–¥–º–µ—Ç—ã: {', '.join(rewards['dropped_items'])}\n"

            if rewards['level_up']:
                reward_text += f"\nüéä –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ {player.level} —É—Ä–æ–≤–Ω—è!"

            await callback_query.message.edit_text(
                f"{battle_log}\n\n{reward_text}",
                parse_mode=types.ParseMode.HTML
            )
        else:
            await callback_query.message.edit_text(
                f"{battle_log}\n\n"
                "‚ò†Ô∏è –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –±–∏—Ç–≤—É!\n"
                "–ü–æ—Ç–µ—Ä—è–Ω–æ 10 —ç–Ω–µ—Ä–≥–∏–∏."
            )

        session.commit()
        await GameStates.main_menu.set()

    # –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–∑–µ–º–µ–ª–∏–π
    @dp.message_handler(lambda message: message.text == "üè∞ –ü–æ–¥–∑–µ–º–µ–ª—å—è", state=GameStates.main_menu)
    async def show_dungeons(message: types.Message):
        session = Session()
        player = session.query(Player).filter_by(user_id=message.from_user.id).first()

        available_dungeons = session.query(Dungeon).filter(
            Dungeon.min_level <= player.level
        ).all()

        if not available_dungeons:
            await message.answer("üè∞ –î–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–∑–µ–º–µ–ª–∏–π –ø–æ–∫–∞ –Ω–µ—Ç. –ü–æ–≤—ã—Å—å—Ç–µ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å!")
            return

        dungeon_keyboard = types.InlineKeyboardMarkup()
        for dungeon in available_dungeons:
            dungeon_keyboard.add(
                types.InlineKeyboardButton(
                    f"{dungeon.name} (–£—Ä. {dungeon.min_level}+)",
                    callback_data=f"dungeon_{dungeon.id}"
                )
            )

        await message.answer(
            "üè∞ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–∑–µ–º–µ–ª—å—è:\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∑–µ–º–µ–ª—å–µ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:",
            reply_markup=dungeon_keyboard
        )
        await GameStates.dungeon.set()

    @dp.callback_query_handler(lambda c: c.data.startswith('dungeon_'), state=GameStates.dungeon)
    async def process_dungeon_selection(callback_query: types.CallbackQuery, state: FSMContext):
        session = Session()
        player = session.query(Player).filter_by(user_id=callback_query.from_user.id).first()

        dungeon_id = int(callback_query.data.split('_')[1])
        dungeon = session.query(Dungeon).get(dungeon_id)

        if not dungeon:
            await callback_query.message.edit_text("–û—à–∏–±–∫–∞: –ø–æ–¥–∑–µ–º–µ–ª—å–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await GameStates.main_menu.set()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
        progress = session.query(DungeonProgress).filter_by(
            player_id=player.id,
            dungeon_id=dungeon_id
        ).first()

        if progress and progress.last_attempt:
            cooldown_end = progress.last_attempt + timedelta(hours=dungeon.cooldown)
            if datetime.utcnow() < cooldown_end:
                time_left = cooldown_end - datetime.utcnow()
                hours, remainder = divmod(int(time_left.total_seconds()), 3600)
                minutes, seconds = divmod(remainder, 60)

                await callback_query.message.edit_text(
                    f"‚è≥ –ü–æ–¥–∑–µ–º–µ–ª—å–µ –µ—â–µ –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å!\n"
                    f"–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {hours}—á {minutes}–º"
                )
                return

        if player.energy < dungeon.energy_cost:
            await callback_query.message.edit_text(
                f"‚ö†Ô∏è –î–ª—è –≤—Ö–æ–¥–∞ –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è {dungeon.energy_cost} —ç–Ω–µ—Ä–≥–∏–∏.\n"
                f"–£ –≤–∞—Å –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ {player.energy} —ç–Ω–µ—Ä–≥–∏–∏."
            )
            return

            # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–æ–¥–∑–µ–º–µ–ª—å—è
        player.energy -= dungeon.energy_cost

        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–¥–∑–µ–º–µ–ª—å—è
        if not progress:
            progress = DungeonProgress(
                player_id=player.id,
                dungeon_id=dungeon_id,
                completed_times=0
            )
            session.add(progress)

        progress.last_attempt = datetime.utcnow()
        progress.current_progress = {
            'current_room': 0,
            'monsters_defeated': 0,
            'hp_remaining': player.health,
            'start_time': datetime.utcnow().timestamp()
        }

        dungeon_keyboard = types.InlineKeyboardMarkup()
        dungeon_keyboard.add(
            types.InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è –∫–æ–º–Ω–∞—Ç–∞", callback_data=f"dungeon_next_{dungeon_id}"))
        dungeon_keyboard.add(types.InlineKeyboardButton("üèÉ –ü–æ–∫–∏–Ω—É—Ç—å –ø–æ–¥–∑–µ–º–µ–ª—å–µ", callback_data="dungeon_leave"))

        await callback_query.message.edit_text(
            f"üè∞ –í—ã –≤–æ—à–ª–∏ –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ {dungeon.name}!\n\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {dungeon.description}\n"
            f"–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {dungeon.min_level}+\n"
            f"–ö–æ–º–Ω–∞—Ç –¥–æ –±–æ—Å—Å–∞: {len(dungeon.monster_groups)}\n"
            f"–í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ: {dungeon.completion_time} –º–∏–Ω—É—Ç\n\n"
            "–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –±–∏—Ç–≤–µ!",
            reply_markup=dungeon_keyboard
        )
        session.commit()

    @dp.callback_query_handler(lambda c: c.data.startswith('dungeon_next_'), state=GameStates.dungeon)
    async def process_dungeon_room(callback_query: types.CallbackQuery, state: FSMContext):
        session = Session()
        player = session.query(Player).filter_by(user_id=callback_query.from_user.id).first()
        dungeon_id = int(callback_query.data.split('_')[2])
        dungeon = session.query(Dungeon).get(dungeon_id)
        progress = session.query(DungeonProgress).filter_by(
            player_id=player.id,
            dungeon_id=dungeon_id
        ).first()

        if not progress or not progress.current_progress:
            await callback_query.message.edit_text("–û—à–∏–±–∫–∞: –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–¥–∑–µ–º–µ–ª—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await GameStates.main_menu.set()
            return

        current_room = progress.current_progress['current_room']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
        elapsed_time = datetime.utcnow().timestamp() - progress.current_progress['start_time']
        if elapsed_time > dungeon.completion_time * 60:
            await callback_query.message.edit_text(
                "‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –í—ã –Ω–µ —É—Å–ø–µ–ª–∏ –ø—Ä–æ–π—Ç–∏ –ø–æ–¥–∑–µ–º–µ–ª—å–µ.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–∑–µ–º–µ–ª—å—è."
            )
            await GameStates.main_menu.set()
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ–Ω—Å—Ç—Ä–æ–≤ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã
        if current_room < len(dungeon.monster_groups):
            room_monsters = []
            for monster_id, count in dungeon.monster_groups[current_room].items():
                monster = session.query(Monster).get(monster_id)
                if monster:
                    room_monsters.extend([monster] * count)

            # –°—Ä–∞–∂–µ–Ω–∏–µ —Å –º–æ–Ω—Å—Ç—Ä–∞–º–∏ –∫–æ–º–Ω–∞—Ç—ã
            battle_logs = []
            for monster in room_monsters:
                battle_result = await battle_calculation(player, monster, session)
                battle_logs.extend(battle_result['battle_log'])

                if not battle_result['victory']:
                    await callback_query.message.edit_text(
                        f"{'‚öîÔ∏è '.join(battle_logs)}\n\n"
                        "‚ò†Ô∏è –í—ã –ø–∞–ª–∏ –≤ –±–æ—é! –ü–æ–¥–∑–µ–º–µ–ª—å–µ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ."
                    )
                    await GameStates.main_menu.set()
                    return

                player.health = battle_result['remaining_hp']
                progress.current_progress['monsters_defeated'] += 1

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            progress.current_progress['current_room'] += 1
            progress.current_progress['hp_remaining'] = player.health

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏ –±–æ—Å—Å
            if progress.current_progress['current_room'] >= len(dungeon.monster_groups):
                if dungeon.boss_id:
                    # –ë–∏—Ç–≤–∞ —Å –±–æ—Å—Å–æ–º
                    boss = session.query(Monster).get(dungeon.boss_id)
                    boss_battle = await battle_calculation(player, boss, session)
                    battle_logs.extend(boss_battle['battle_log'])

                    if boss_battle['victory']:
                        # –ù–∞–≥—Ä–∞–¥—ã –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ
                        rewards = await process_dungeon_rewards(player, dungeon, session)
                        progress.completed_times += 1

                        if not progress.best_time or elapsed_time < progress.best_time:
                            progress.best_time = int(elapsed_time)

                        reward_text = (
                            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–æ—à–ª–∏ –ø–æ–¥–∑–µ–º–µ–ª—å–µ {dungeon.name}!\n\n"
                            f"–ù–∞–≥—Ä–∞–¥—ã:\n"
                            f"‚ú® –û–ø—ã—Ç: {rewards['experience']}\n"
                            f"ü•ñ –ë–∞—Ç–æ–Ω—ã: {rewards['batons']}\n"
                        )

                        if rewards['items']:
                            reward_text += f"üì¶ –ü—Ä–µ–¥–º–µ—Ç—ã:\n" + "\n".join([f"- {item}" for item in rewards['items']])

                        if rewards['level_up']:
                            reward_text += f"\nüéä –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ {player.level} —É—Ä–æ–≤–Ω—è!"

                        await callback_query.message.edit_text(reward_text)

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                    if boss:  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –±–æ—Å—Å–∞
                        if victory:  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã –Ω–∞–¥ –±–æ—Å—Å–æ–º
                            await check_achievements(player, session, {
                                'dungeon_completed': dungeon.id,
                                'monsters_killed': progress.current_progress['monsters_defeated']
                            })
                        else:
                            await callback_query.message.edit_text(
                                f"{'‚öîÔ∏è '.join(battle_logs)}\n\n"
                                f"‚ò†Ô∏è –ë–æ—Å—Å {boss.name} –æ–∫–∞–∑–∞–ª—Å—è —Å–ª–∏—à–∫–æ–º —Å–∏–ª—ë–Ω! –ü–æ–¥–∑–µ–º–µ–ª—å–µ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ."
                            )
                    else:
                        # –ü–æ–¥–∑–µ–º–µ–ª—å–µ –±–µ–∑ –±–æ—Å—Å–∞
                        rewards = await process_dungeon_rewards(player, dungeon, session)
                        await callback_query.message.edit_text(
                            f"üéâ –ü–æ–¥–∑–µ–º–µ–ª—å–µ {dungeon.name} –ø—Ä–æ–π–¥–µ–Ω–æ!\n\n"
                            f"–ü–æ–ª—É—á–µ–Ω–æ:\n"
                            f"‚ú® –û–ø—ã—Ç: {rewards['experience']}\n"
                            f"ü•ñ –ë–∞—Ç–æ–Ω—ã: {rewards['batons']}\n"
                            f"üì¶ –ü—Ä–µ–¥–º–µ—Ç—ã: {', '.join(rewards['items']) if rewards['items'] else '–Ω–µ—Ç'}"
                        )
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∑–µ–º–µ–ª—å—è
                    dungeon_keyboard = types.InlineKeyboardMarkup()
                    dungeon_keyboard.add(
                        types.InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è –∫–æ–º–Ω–∞—Ç–∞", callback_data=f"dungeon_next_{dungeon_id}")
                    )
                    dungeon_keyboard.add(
                        types.InlineKeyboardButton("üèÉ –ü–æ–∫–∏–Ω—É—Ç—å –ø–æ–¥–∑–µ–º–µ–ª—å–µ", callback_data="dungeon_leave")
                    )

                    await callback_query.message.edit_text(
                        f"–ö–æ–º–Ω–∞—Ç–∞ {progress.current_progress['current_room']} –ø—Ä–æ–π–¥–µ–Ω–∞!\n\n"
                        f"{'‚öîÔ∏è '.join(battle_logs)}\n\n"
                        f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {player.health}/{player.max_health}\n"
                        f"‚ö° –≠–Ω–µ—Ä–≥–∏—è: {player.energy}/{player.max_energy}\n"
                        f"–ú–æ–Ω—Å—Ç—Ä–æ–≤ –ø–æ–±–µ–∂–¥–µ–Ω–æ: {progress.current_progress['monsters_defeated']}\n"
                        f"–î–æ –±–æ—Å—Å–∞ –æ—Å—Ç–∞–ª–æ—Å—å –∫–æ–º–Ω–∞—Ç: {len(dungeon.monster_groups) - progress.current_progress['current_room']}",
                        reply_markup=dungeon_keyboard
                    )

                session.commit()

                # –°–∏—Å—Ç–µ–º–∞ –∫—Ä–∞—Ñ—Ç–∏–Ω–≥–∞
                class Recipe(Base):
                    __tablename__ = 'recipes'
                    id = Column(Integer, primary_key=True)
                    name = Column(String)
                    result_item_id = Column(Integer, ForeignKey('items.id'))
                    result_quantity = Column(Integer, default=1)
                    required_level = Column(Integer, default=1)
                    energy_cost = Column(Integer)
                    materials = Column(JSON)  # {item_id: quantity}
                    crafting_time = Column(Integer)  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                    experience = Column(Integer)
                    category = Column(String)

                @dp.message_handler(lambda message: message.text == "üõ†Ô∏è –ö—Ä–∞—Ñ—Ç–∏–Ω–≥", state=GameStates.main_menu)
                async def show_crafting(message: types.Message):
                    session = Session()
                    player = session.query(Player).filter_by(user_id=message.from_user.id).first()

                    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã
                    available_recipes = session.query(Recipe).filter(
                        Recipe.required_level <= player.level
                    ).all()

                    if not available_recipes:
                        await message.answer(
                            "üõ†Ô∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤.\n"
                            "–ü–æ–≤—ã—Å—å—Ç–µ —É—Ä–æ–≤–µ–Ω—å, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã!"
                        )
                        return

                    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                    recipes_by_category = {}
                    for recipe in available_recipes:
                        if recipe.category not in recipes_by_category:
                            recipes_by_category[recipe.category] = []
                        recipes_by_category[recipe.category].append(recipe)

                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
                    keyboard = types.InlineKeyboardMarkup()
                    for category in recipes_by_category.keys():
                        keyboard.add(types.InlineKeyboardButton(
                            f"üìë {category}",
                            callback_data=f"craft_category_{category}"
                        ))

                    await message.answer(
                        "üõ†Ô∏è –ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è –∫—Ä–∞—Ñ—Ç–∞\n\n"
                        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ—Ü–µ–ø—Ç–æ–≤:",
                        reply_markup=keyboard
                    )
                    await GameStates.craft.set()

                @dp.callback_query_handler(lambda c: c.data.startswith('craft_category_'), state=GameStates.craft)
                async def show_category_recipes(callback_query: types.CallbackQuery):
                    category = callback_query.data.split('_')[2]
                    session = Session()
                    player = session.query(Player).filter_by(user_id=callback_query.from_user.id).first()

                    recipes = session.query(Recipe).filter(
                        Recipe.category == category,
                        Recipe.required_level <= player.level
                    ).all()

                    keyboard = types.InlineKeyboardMarkup()
                    for recipe in recipes:
                        result_item = session.query(Item).get(recipe.result_item_id)
                        keyboard.add(types.InlineKeyboardButton(
                            f"{result_item.name} (–£—Ä. {recipe.required_level})",
                            callback_data=f"craft_recipe_{recipe.id}"
                        ))
                    keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="craft_back"))

                    await callback_query.message.edit_text(
                        f"üõ†Ô∏è –†–µ—Ü–µ–ø—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}:\n"
                        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞:",
                        reply_markup=keyboard
                    )

                @dp.callback_query_handler(lambda c: c.data.startswith('craft_recipe_'), state=GameStates.craft)
                async def show_recipe_details(callback_query: types.CallbackQuery):
                    recipe_id = int(callback_query.data.split('_')[2])
                    session = Session()

                    recipe = session.query(Recipe).get(recipe_id)
                    result_item = session.query(Item).get(recipe.result_item_id)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —É –∏–≥—Ä–æ–∫–∞
                    player = session.query(Player).filter_by(user_id=callback_query.from_user.id).first()
                    materials_text = ""
                    can_craft = True

                    for material_id, required_qty in recipe.materials.items():
                        material_item = session.query(Item).get(material_id)
                        player_material = session.query(Inventory).filter_by(
                            player_id=player.id,
                            item_id=material_id
                        ).first()

                        has_qty = player_material.quantity if player_material else 0
                        materials_text += f"\n{'‚úÖ' if has_qty >= required_qty else '‚ùå'} {material_item.name}: {has_qty}/{required_qty}"

                        if has_qty < required_qty:
                            can_craft = False

                    keyboard = types.InlineKeyboardMarkup()
                    if can_craft and player.energy >= recipe.energy_cost:
                        keyboard.add(types.InlineKeyboardButton(
                            "üõ†Ô∏è –°–æ–∑–¥–∞—Ç—å",
                            callback_data=f"craft_create_{recipe_id}"
                        ))
                    keyboard.add(
                        types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"craft_category_{recipe.category}"))

                    await callback_query.message.edit_text(
                        f"üìë –†–µ—Ü–µ–ø—Ç: {result_item.name}\n"
                        f"–û–ø–∏—Å–∞–Ω–∏–µ: {result_item.description}\n\n"
                        f"–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
                        f"- –£—Ä–æ–≤–µ–Ω—å –∫—Ä–∞—Ñ—Ç–∞: {recipe.required_level}\n"
                        f"- –≠–Ω–µ—Ä–≥–∏—è: {recipe.energy_cost}\n"
                        f"- –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {recipe.crafting_time} —Å–µ–∫.\n\n"
                        f"–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:{materials_text}\n\n"
                        f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result_item.name} x{recipe.result_quantity}",
                        reply_markup=keyboard
                    )

                @dp.callback_query_handler(lambda c: c.data.startswith('craft_create_'), state=GameStates.craft)
                async def create_item(callback_query: types.CallbackQuery):
                    recipe_id = int(callback_query.data.split('_')[2])
                    session = Session()

                    recipe = session.query(Recipe).get(recipe_id)
                    player = session.query(Player).filter_by(user_id=callback_query.from_user.id).first()

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ —ç–Ω–µ—Ä–≥–∏–∏
                    if player.energy < recipe.energy_cost:
                        await callback_query.message.edit_text(
                            "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞!"
                        )
                        return

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Ä–∞—Å—Ö–æ–¥—É–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
                    for material_id, required_qty in recipe.materials.items():
                        inventory_item = session.query(Inventory).filter_by(
                            player_id=player.id,
                            item_id=material_id
                        ).first()

                        if not inventory_item or inventory_item.quantity < required_qty:
                            await callback_query.message.edit_text(
                                "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞!"
                            )
                            return

                        inventory_item.quantity -= required_qty
                        if inventory_item.quantity == 0:
                            session.delete(inventory_item)

                    # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
                    result_item = session.query(Item).get(recipe.result_item_id)
                    existing_item = session.query(Inventory).filter_by(
                        player_id=player.id,
                        item_id=recipe.result_item_id
                    ).first()

                    if existing_item:
                        existing_item.quantity += recipe.result_quantity
                    else:
                        new_item = Inventory(
                            player_id=player.id,
                            item_id=recipe.result_item_id,
                            quantity=recipe.result_quantity
                        )
                        session.add(new_item)

                    # –†–∞—Å—Ö–æ–¥—É–µ–º —ç–Ω–µ—Ä–≥–∏—é –∏ –Ω–∞—á–∏—Å–ª—è–µ–º –æ–ø—ã—Ç
                    player.energy -= recipe.energy_cost
                    player.crafting_experience += recipe.experience

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∫—Ä–∞—Ñ—Ç–∞
                    old_level = player.crafting_level
                    while player.crafting_experience >= get_next_crafting_level_exp(player.crafting_level):
                        player.crafting_level += 1

                    level_up_text = f"\nüéä –£—Ä–æ–≤–µ–Ω—å –∫—Ä–∞—Ñ—Ç–∞ –ø–æ–≤—ã—à–µ–Ω –¥–æ {player.crafting_level}!" if player.crafting_level > old_level else ""

                    session.commit()

                    await callback_query.message.edit_text(
                        f"üéâ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: {result_item.name} x{recipe.result_quantity}\n"
                        f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏: {recipe.energy_cost}\n"
                        f"–ü–æ–ª—É—á–µ–Ω–æ –æ–ø—ã—Ç–∞ –∫—Ä–∞—Ñ—Ç–∞: {recipe.experience}{level_up_text}"
                    )

                # –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
                @dp.message_handler(lambda message: message.text == "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", state=GameStates.main_menu)
                async def show_achievements(message: types.Message):
                    session = Session()
                    player = session.query(Player).filter_by(user_id=message.from_user.id).first()

                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–≥—Ä–æ–∫–∞
                    achievements = session.query(Achievement).all()
                    player_achievements = {
                        pa.achievement_id: pa
                        for pa in session.query(PlayerAchievement).filter_by(player_id=player.id).all()
                    }

                    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º
                    achievements_by_type = {}
                    for achievement in achievements:
                        if achievement.achievement_type not in achievements_by_type:
                            achievements_by_type[achievement.achievement_type] = []
                        achievements_by_type[achievement.achievement_type].append(achievement)

                    response_text = f"üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ {player.name}\n"
                    response_text += f"–û—á–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {player.achievement_points}\n\n"

                    for achievement_type, type_achievements in achievements_by_type.items():
                        response_text += f"üìë {achievement_type}:\n"
                        for achievement in type_achievements:
                            player_achievement = player_achievements.get(achievement.id)
                            if player_achievement and player_achievement.completed:
                                status = "‚úÖ"
                            else:
                                status = "‚ùå"

                            progress = ""
                            if player_achievement and achievement.requirements:
                                for req_type, req_value in achievement.requirements.items():
                                    current_value = player_achievement.progress.get(req_type, 0)
                                    progress = f" ({current_value}/{req_value})"

                            response_text += f"{status} {achievement.name}{progress}\n"
                            if player_achievement and player_achievement.completed:
                                response_text += f"    üéÅ –ù–∞–≥—Ä–∞–¥–∞: {achievement.reward_batons} –±–∞—Ç–æ–Ω–æ–≤"
                                if achievement.reward_title:
                                    response_text += f", —Ç–∏—Ç—É–ª '{achievement.reward_title}'"
                                if achievement.reward_items:
                                    items = []
                                    for item_id, quantity in achievement.reward_items.items():
                                        item = session.query(Item).get(item_id)
                                        if item:
                                            items.append(f"{item.name} x{quantity}")
                                    if items:
                                        response_text += f", –ø—Ä–µ–¥–º–µ—Ç—ã: {', '.join(items)}"
                                response_text += "\n"
                            response_text += "\n"

                        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if len(response_text) > 4096:
                        parts = [response_text[i:i + 4096] for i in range(0, len(response_text), 4096)]
                        for part in parts:
                            await message.answer(part)
                    else:
                        await message.answer(response_text)

                    async def check_achievements(player: Player, session, event_data: dict):
                        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏–≥—Ä–æ–∫–∞"""
                        achievements = session.query(Achievement).all()

                        for achievement in achievements:
                            player_achievement = session.query(PlayerAchievement).filter_by(
                                player_id=player.id,
                                achievement_id=achievement.id
                            ).first()

                            if not player_achievement:
                                player_achievement = PlayerAchievement(
                                    player_id=player.id,
                                    achievement_id=achievement.id,
                                    progress={}
                                )
                                session.add(player_achievement)

                            if not player_achievement.completed:
                                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                                updated = False
                                for req_type, req_value in achievement.requirements.items():
                                    if req_type in event_data:
                                        current_value = player_achievement.progress.get(req_type, 0)
                                        if req_type == event_data.get('type'):
                                            player_achievement.progress[req_type] = current_value + event_data.get(
                                                'value', 1)
                                        updated = True

                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                                if updated:
                                    completed = True
                                    for req_type, req_value in achievement.requirements.items():
                                        current_value = player_achievement.progress.get(req_type, 0)
                                        if current_value < req_value:
                                            completed = False
                                            break

                                    if completed:
                                        player_achievement.completed = True
                                        player_achievement.completed_at = datetime.utcnow()

                                        # –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã
                                        player.batons += achievement.reward_batons
                                        player.achievement_points += achievement.points

                                        if achievement.reward_items:
                                            for item_id, quantity in achievement.reward_items.items():
                                                existing_item = session.query(Inventory).filter_by(
                                                    player_id=player.id,
                                                    item_id=item_id
                                                ).first()

                                                if existing_item:
                                                    existing_item.quantity += quantity
                                                else:
                                                    new_item = Inventory(
                                                        player_id=player.id,
                                                        item_id=item_id,
                                                        quantity=quantity
                                                    )
                                                    session.add(new_item)

                                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É
                                        await bot.send_message(
                                            player.user_id,
                                            f"üéä –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {achievement.name}!\n"
                                            f"–ù–∞–≥—Ä–∞–¥—ã:\n"
                                            f"ü•ñ {achievement.reward_batons} –±–∞—Ç–æ–Ω–æ–≤\n"
                                            f"üèÜ {achievement.points} –æ—á–∫–æ–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"
                                            + (
                                                f"\nüëë –¢–∏—Ç—É–ª: {achievement.reward_title}" if achievement.reward_title else "")
                                        )

                    # –°–∏—Å—Ç–µ–º–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
                    class DailyQuest(Base):
                        __tablename__ = 'daily_quests'
                        id = Column(Integer, primary_key=True)
                        name = Column(String)
                        description = Column(String)
                        requirements = Column(JSON)  # {type: value}
                        reward_batons = Column(Integer)
                        reward_experience = Column(Integer)
                        reward_items = Column(JSON, nullable=True)  # {item_id: quantity}
                        energy_cost = Column(Integer)

                    class PlayerDailyQuest(Base):
                        __tablename__ = 'player_daily_quests'
                        id = Column(Integer, primary_key=True)
                        player_id = Column(Integer, ForeignKey('players.id'))
                        quest_id = Column(Integer, ForeignKey('daily_quests.id'))
                        progress = Column(JSON)
                        completed = Column(Boolean, default=False)
                        date = Column(DateTime, default=datetime.utcnow)

                    @dp.message_handler(lambda message: message.text == "üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è",
                                        state=GameStates.main_menu)
                    async def show_daily_quests(message: types.Message):
                        session = Session()
                        player = session.query(Player).filter_by(user_id=message.from_user.id).first()

                        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏–≥—Ä–æ–∫–∞
                        today = datetime.utcnow().date()
                        player_quests = session.query(PlayerDailyQuest).filter(
                            PlayerDailyQuest.player_id == player.id,
                            func.date(PlayerDailyQuest.date) == today
                        ).all()

                        if not player_quests:
                            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è
                            available_quests = session.query(DailyQuest).all()
                            daily_quests = random.sample(available_quests, min(3, len(available_quests)))

                            for quest in daily_quests:
                                new_quest = PlayerDailyQuest(
                                    player_id=player.id,
                                    quest_id=quest.id,
                                    progress={req_type: 0 for req_type in quest.requirements.keys()}
                                )
                                session.add(new_quest)

                            session.commit()
                            player_quests = daily_quests

                        response_text = "üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:\n\n"

                        for player_quest in player_quests:
                            quest = session.query(DailyQuest).get(player_quest.quest_id)
                            status = "‚úÖ" if player_quest.completed else "‚ùå"

                            response_text += f"{status} {quest.name}\n"
                            response_text += f"üìù {quest.description}\n"

                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                            for req_type, req_value in quest.requirements.items():
                                current_value = player_quest.progress.get(req_type, 0)
                                response_text += f"- {req_type}: {current_value}/{req_value}\n"

                            response_text += f"–ù–∞–≥—Ä–∞–¥—ã:\n"
                            response_text += f"ü•ñ {quest.reward_batons} –±–∞—Ç–æ–Ω–æ–≤\n"
                            response_text += f"‚ú® {quest.reward_experience} –æ–ø—ã—Ç–∞\n"

                            if quest.reward_items:
                                response_text += "üì¶ –ü—Ä–µ–¥–º–µ—Ç—ã:\n"
                                for item_id, quantity in quest.reward_items.items():
                                    item = session.query(Item).get(item_id)
                                    if item:
                                        response_text += f"- {item.name} x{quantity}\n"

                            response_text += f"‚ö° –¢—Ä–µ–±—É–µ—Ç—Å—è —ç–Ω–µ—Ä–≥–∏–∏: {quest.energy_cost}\n\n"

                        keyboard = types.InlineKeyboardMarkup()
                        for player_quest in player_quests:
                            if not player_quest.completed:
                                quest = session.query(DailyQuest).get(player_quest.quest_id)
                                keyboard.add(types.InlineKeyboardButton(
                                    f"–í—ã–ø–æ–ª–Ω–∏—Ç—å: {quest.name}",
                                    callback_data=f"daily_quest_{player_quest.id}"
                                ))

                        await message.answer(response_text, reply_markup=keyboard)

                        @dp.callback_query_handler(lambda c: c.data.startswith('daily_quest_'),
                                                   state=GameStates.main_menu)
                        async def process_daily_quest(callback_query: types.CallbackQuery):
                            quest_id = int(callback_query.data.split('_')[2])
                            session = Session()
                            player = session.query(Player).filter_by(user_id=callback_query.from_user.id).first()
                            player_quest = session.query(PlayerDailyQuest).get(quest_id)
                            quest = session.query(DailyQuest).get(player_quest.quest_id)

                            if player.energy < quest.energy_cost:
                                await callback_query.answer("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è!")
                                return

                            # –°–ø–∏—Å—ã–≤–∞–µ–º —ç–Ω–µ—Ä–≥–∏—é
                            player.energy -= quest.energy_cost

                            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                            success_chance = 0.7  # 70% —à–∞–Ω—Å —É—Å–ø–µ—Ö–∞
                            success = random.random() < success_chance

                            if success:
                                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞–Ω–∏—è
                                for req_type, req_value in quest.requirements.items():
                                    current_value = player_quest.progress.get(req_type, 0)
                                    progress_increment = random.randint(1, min(5, req_value - current_value))
                                    player_quest.progress[req_type] = min(req_value, current_value + progress_increment)

                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
                                completed = all(
                                    player_quest.progress.get(req_type, 0) >= req_value
                                    for req_type, req_value in quest.requirements.items()
                                )

                                if completed:
                                    player_quest.completed = True

                                    # –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã
                                    player.batons += quest.reward_batons
                                    level_up = player.add_experience(quest.reward_experience)

                                    # –í—ã–¥–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã
                                    received_items = []
                                    if quest.reward_items:
                                        for item_id, quantity in quest.reward_items.items():
                                            item = session.query(Item).get(item_id)
                                            if item:
                                                existing_item = session.query(Inventory).filter_by(
                                                    player_id=player.id,
                                                    item_id=item_id
                                                ).first()

                                                if existing_item:
                                                    existing_item.quantity += quantity
                                                else:
                                                    new_item = Inventory(
                                                        player_id=player.id,
                                                        item_id=item_id,
                                                        quantity=quantity
                                                    )
                                                    session.add(new_item)
                                                received_items.append(f"{item.name} x{quantity}")

                                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–≥—Ä–∞–¥—ã
                                    reward_text = (
                                        f"üéâ –ó–∞–¥–∞–Ω–∏–µ \"{quest.name}\" –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!\n\n"
                                        f"–ü–æ–ª—É—á–µ–Ω–æ:\n"
                                        f"ü•ñ {quest.reward_batons} –±–∞—Ç–æ–Ω–æ–≤\n"
                                        f"‚ú® {quest.reward_experience} –æ–ø—ã—Ç–∞"
                                    )

                                    if received_items:
                                        reward_text += f"\nüì¶ –ü—Ä–µ–¥–º–µ—Ç—ã:\n" + "\n".join(
                                            f"- {item}" for item in received_items)

                                    if level_up:
                                        reward_text += f"\n\nüéä –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ {player.level} —É—Ä–æ–≤–Ω—è!"

                                    await callback_query.message.edit_text(reward_text)
                                else:
                                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
                                    progress_text = f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞–Ω–∏—è \"{quest.name}\":\n\n"
                                    for req_type, req_value in quest.requirements.items():
                                        current = player_quest.progress.get(req_type, 0)
                                        progress_text += f"- {req_type}: {current}/{req_value}\n"

                                    await callback_query.message.edit_text(
                                        f"{progress_text}\n‚ö° –ü–æ—Ç—Ä–∞—á–µ–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏: {quest.energy_cost}"
                                    )
                            else:
                                await callback_query.message.edit_text(
                                    f"‚ùå –ù–µ—É–¥–∞—á–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è \"{quest.name}\"!\n"
                                    f"‚ö° –ü–æ—Ç—Ä–∞—á–µ–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏: {quest.energy_cost}"
                                )

                            session.commit()

                        # –°–∏—Å—Ç–µ–º–∞ PvP
                        @dp.message_handler(lambda message: message.text == "‚öîÔ∏è PvP –ê—Ä–µ–Ω–∞", state=GameStates.main_menu)
                        async def show_pvp_arena(message: types.Message):
                            session = Session()
                            player = session.query(Player).filter_by(user_id=message.from_user.id).first()

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä–æ–∫–∞
                            if player.level < 5:
                                await message.answer(
                                    "‚ö†Ô∏è PvP –∞—Ä–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Å 5 —É—Ä–æ–≤–Ω—è!\n"
                                    f"–í–∞—à —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {player.level}"
                                )
                                return

                            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤
                            opponents = session.query(Player).filter(
                                Player.id != player.id,
                                Player.level.between(player.level - 2, player.level + 2)
                            ).order_by(func.random()).limit(5).all()

                            if not opponents:
                                await message.answer("üòî –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!")
                                return

                            response_text = (
                                "‚öîÔ∏è PvP –ê—Ä–µ–Ω–∞\n\n"
                                f"–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥: {player.pvp_rating}\n"
                                f"–ü–æ–±–µ–¥—ã: {player.wins} | –ü–æ—Ä–∞–∂–µ–Ω–∏—è: {player.losses}\n\n"
                                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∏:\n"
                            )

                            keyboard = types.InlineKeyboardMarkup()
                            for opponent in opponents:
                                response_text += (
                                    f"üë§ {opponent.name}\n"
                                    f"–£—Ä–æ–≤–µ–Ω—å: {opponent.level} | –†–µ–π—Ç–∏–Ω–≥: {opponent.pvp_rating}\n"
                                    f"–ü–æ–±–µ–¥—ã: {opponent.wins} | –ü–æ—Ä–∞–∂–µ–Ω–∏—è: {opponent.losses}\n\n"
                                )
                                keyboard.add(types.InlineKeyboardButton(
                                    f"‚öîÔ∏è –ê—Ç–∞–∫–æ–≤–∞—Ç—å {opponent.name}",
                                    callback_data=f"pvp_attack_{opponent.id}"
                                ))

                            await message.answer(response_text, reply_markup=keyboard)
                            await GameStates.pvp.set()

                        @dp.callback_query_handler(lambda c: c.data.startswith('pvp_attack_'), state=GameStates.pvp)
                        async def process_pvp_attack(callback_query: types.CallbackQuery, state: FSMContext):
                            opponent_id = int(callback_query.data.split('_')[2])
                            session = Session()

                            player = session.query(Player).filter_by(user_id=callback_query.from_user.id).first()
                            opponent = session.query(Player).get(opponent_id)

                            if player.energy < 20:
                                await callback_query.answer("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è PvP –±–∏—Ç–≤—ã!")
                                return

                            # –°–ø–∏—Å—ã–≤–∞–µ–º —ç–Ω–µ—Ä–≥–∏—é
                            player.energy -= 20

                            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—ã –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
                            player_stats = player.get_total_stats(session)
                            opponent_stats = opponent.get_total_stats(session)

                            battle_log = []
                            player_hp = player_stats['health']
                            opponent_hp = opponent_stats['health']
                            rounds = 0

                            while player_hp > 0 and opponent_hp > 0 and rounds < 20:
                                # –•–æ–¥ –∏–≥—Ä–æ–∫–∞
                                player_damage = max(1, player_stats['damage'] - opponent_stats['defense'] // 2)
                                crit_chance = random.random() < (player_stats['critical_chance'] / 100)
                                if crit_chance:
                                    player_damage *= 2
                                    battle_log.append(
                                        f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä! {player.name} –Ω–∞–Ω–æ—Å–∏—Ç {player_damage} —É—Ä–æ–Ω–∞!")
                                else:
                                    battle_log.append(f"‚öîÔ∏è {player.name} –Ω–∞–Ω–æ—Å–∏—Ç {player_damage} —É—Ä–æ–Ω–∞!")

                                dodge_chance = random.random() < (opponent_stats['dodge_chance'] / 100)
                                if dodge_chance:
                                    battle_log.append(f"üåü {opponent.name} —É–∫–ª–æ–Ω—è–µ—Ç—Å—è –æ—Ç –∞—Ç–∞–∫–∏!")
                                else:
                                    opponent_hp -= player_damage

                                # –•–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
                                if opponent_hp > 0:
                                    opponent_damage = max(1, opponent_stats['damage'] - player_stats['defense'] // 2)
                                    crit_chance = random.random() < (opponent_stats['critical_chance'] / 100)
                                    if crit_chance:
                                        opponent_damage *= 2
                                        battle_log.append(
                                            f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä! {opponent.name} –Ω–∞–Ω–æ—Å–∏—Ç {opponent_damage} —É—Ä–æ–Ω–∞!")
                                    else:
                                        battle_log.append(f"‚öîÔ∏è {opponent.name} –Ω–∞–Ω–æ—Å–∏—Ç {opponent_damage} —É—Ä–æ–Ω–∞!")

                                    dodge_chance = random.random() < (player_stats['dodge_chance'] / 100)
                                    if dodge_chance:
                                        battle_log.append(f"üåü {player.name} —É–∫–ª–æ–Ω—è–µ—Ç—Å—è –æ—Ç –∞—Ç–∞–∫–∏!")
                                    else:
                                        player_hp -= opponent_damage

                                rounds += 1

                            victory = player_hp > 0

                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                            if victory:
                                player.wins += 1
                                opponent.losses += 1

                                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
                                rating_diff = calculate_rating_change(player.pvp_rating, opponent.pvp_rating, True)
                                player.pvp_rating += rating_diff
                                opponent.pvp_rating -= rating_diff

                                # –ù–∞–≥—Ä–∞–¥—ã –∑–∞ –ø–æ–±–µ–¥—É
                                reward_batons = random.randint(50, 100)
                                reward_exp = random.randint(100, 200)

                                player.batons += reward_batons
                                level_up = player.add_experience(reward_exp)

                                result_text = (
                                    f"üéâ –ü–æ–±–µ–¥–∞ –≤ PvP –±–∏—Ç–≤–µ!\n\n"
                                    f"{'‚öîÔ∏è '.join(battle_log)}\n\n"
                                    f"–ù–∞–≥—Ä–∞–¥—ã:\n"
                                    f"ü•ñ {reward_batons} –±–∞—Ç–æ–Ω–æ–≤\n"
                                    f"‚ú® {reward_exp} –æ–ø—ã—Ç–∞\n"
                                    f"üìä –†–µ–π—Ç–∏–Ω–≥: +{rating_diff}"
                                )

                                if level_up:
                                    result_text += f"\n\nüéä –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ {player.level} —É—Ä–æ–≤–Ω—è!"
                            else:
                                player.losses += 1
                                opponent.wins += 1

                                rating_diff = calculate_rating_change(player.pvp_rating, opponent.pvp_rating, False)
                                player.pvp_rating -= rating_diff
                                opponent.pvp_rating += rating_diff

                                result_text = (
                                    f"‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–µ –≤ PvP –±–∏—Ç–≤–µ!\n\n"
                                    f"{'‚öîÔ∏è '.join(battle_log)}\n\n"
                                    f"üìä –†–µ–π—Ç–∏–Ω–≥: -{rating_diff}"
                                )

                            session.commit()
                            await callback_query.message.edit_text(result_text)
                            await GameStates.main_menu.set()

                        def calculate_rating_change(winner_rating: int, loser_rating: int, is_winner: bool) -> int:
                            """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ —Å–∏—Å—Ç–µ–º–µ ELO"""
                            K = 32  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
                            expected = 1 / (1 + 10 ** ((loser_rating - winner_rating) / 400))
                            change = round(K * (1 - expected) if is_winner else K * (0 - expected))
                            return abs(change)

                        # –°–∏—Å—Ç–µ–º–∞ —Ç–∏—Ç—É–ª–æ–≤ –∏ —Ä–∞–Ω–≥–æ–≤
                        class Title(Base):
                            __tablename__ = 'titles'
                            id = Column(Integer, primary_key=True)
                            name = Column(String)
                            description = Column(String)
                            requirement_type = Column(String)  # pvp_rating, achievement_points, level, etc.
                            requirement_value = Column(Integer)
                            bonus_strength = Column(Integer, default=0)
                            bonus_agility = Column(Integer, default=0)
                            bonus_intelligence = Column(Integer, default=0)
                            bonus_vitality = Column(Integer, default=0)
                            rarity = Column(String)
                            icon = Column(String, nullable=True)

                        class PvPRank(Base):
                            __tablename__ = 'pvp_ranks'
                            id = Column(Integer, primary_key=True)
                            name = Column(String)
                            min_rating = Column(Integer)
                            max_rating = Column(Integer)
                            rewards = Column(JSON)  # {daily_batons: int, weekly_batons: int, etc}
                            icon = Column(String)

                        PVP_RANKS = [
                            {'name': '–ù–æ–≤–∏—á–æ–∫', 'min_rating': 0, 'max_rating': 1199},
                            {'name': '–ë–æ–µ—Ü', 'min_rating': 1200, 'max_rating': 1499},
                            {'name': '–í–µ—Ç–µ—Ä–∞–Ω', 'min_rating': 1500, 'max_rating': 1799},
                            {'name': '–ú–∞—Å—Ç–µ—Ä', 'min_rating': 1800, 'max_rating': 2099},
                            {'name': '–ì—Ä–æ—Å—Å–º–µ–π—Å—Ç–µ—Ä', 'min_rating': 2100, 'max_rating': 2399},
                            {'name': '–ß–µ–º–ø–∏–æ–Ω', 'min_rating': 2400, 'max_rating': 2699},
                            {'name': '–õ–µ–≥–µ–Ω–¥–∞', 'min_rating': 2700, 'max_rating': 999999}
                        ]

                        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∏—Ç—É–ª–∞–º–∏ –∏ —Ä–∞–Ω–≥–∞–º–∏
                        async def check_new_titles(player: Player, session) -> List[Title]:
                            """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤—ã–¥–∞–µ—Ç –Ω–æ–≤—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏—Ç—É–ª—ã –∏–≥—Ä–æ–∫—É"""
                            new_titles = []
                            all_titles = session.query(Title).all()

                            for title in all_titles:
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —ç—Ç–æ–≥–æ —Ç–∏—Ç—É–ª–∞ —É –∏–≥—Ä–æ–∫–∞
                                has_title = session.query(PlayerTitle).filter_by(
                                    player_id=player.id,
                                    title_id=title.id
                                ).first()

                                if not has_title:
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏—Ç—É–ª–∞
                                    if title.requirement_type == 'pvp_rating' and player.pvp_rating >= title.requirement_value:
                                        earned = True
                                    elif title.requirement_type == 'achievement_points' and player.achievement_points >= title.requirement_value:
                                        earned = True
                                    elif title.requirement_type == 'level' and player.level >= title.requirement_value:
                                        earned = True
                                    else:
                                        earned = False

                                    if earned:
                                        new_title = PlayerTitle(
                                            player_id=player.id,
                                            title_id=title.id
                                        )
                                        session.add(new_title)
                                        new_titles.append(title)

                            if new_titles:
                                session.commit()

                            return new_titles

                        def get_player_rank(rating: int) -> dict:
                            """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–∞–Ω–≥ –∏–≥—Ä–æ–∫–∞ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É"""
                            for rank in PVP_RANKS:
                                if rank['min_rating'] <= rating <= rank['max_rating']:
                                    return rank
                            return PVP_RANKS[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–Ω–≥, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ

                        @dp.message_handler(lambda message: message.text == "üëë –¢–∏—Ç—É–ª—ã", state=GameStates.main_menu)
                        async def show_titles(message: types.Message):
                            session = Session()
                            player = session.query(Player).filter_by(user_id=message.from_user.id).first()

                            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∏—Ç—É–ª—ã –∏–≥—Ä–æ–∫–∞
                            player_titles = session.query(PlayerTitle).filter_by(player_id=player.id).all()

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏—Ç—É–ª—ã
                            new_titles = await check_new_titles(player, session)

                            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π PvP —Ä–∞–Ω–≥
                            current_rank = get_player_rank(player.pvp_rating)

                            response_text = (
                                f"üëë –¢–∏—Ç—É–ª—ã –∏ —Ä–∞–Ω–≥–∏ –∏–≥—Ä–æ–∫–∞ {player.name}\n\n"
                                f"üèÜ PvP —Ä–∞–Ω–≥: {current_rank['name']}\n"
                                f"üìä –†–µ–π—Ç–∏–Ω–≥: {player.pvp_rating}\n"
                                f"–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–Ω–≥–∞: {current_rank['max_rating'] - player.pvp_rating + 1} –æ—á–∫–æ–≤\n\n"
                                "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏—Ç—É–ª—ã:\n"
                            )

                            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏—Ç—É–ª–∞–º–∏
                            keyboard = types.InlineKeyboardMarkup(row_width=2)

                            for player_title in player_titles:
                                title = player_title.title
                                status = "‚úÖ" if player_title.is_active else "‚≠ï"

                                response_text += (
                                    f"{status} {title.name}\n"
                                    f"‚îî {title.description}\n"
                                    f"‚îî –ë–æ–Ω—É—Å—ã: "
                                )

                                bonuses = []
                                if title.bonus_strength: bonuses.append(f"+{title.bonus_strength} –∫ —Å–∏–ª–µ")
                                if title.bonus_agility: bonuses.append(f"+{title.bonus_agility} –∫ –ª–æ–≤–∫–æ—Å—Ç–∏")
                                if title.bonus_intelligence: bonuses.append(f"+{title.bonus_intelligence} –∫ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É")
                                if title.bonus_vitality: bonuses.append(f"+{title.bonus_vitality} –∫ –∂–∏–≤—É—á–µ—Å—Ç–∏")

                                response_text += ", ".join(bonuses) + "\n\n"

                                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–∏—Ç—É–ª–∞
                                keyboard.add(
                                    types.InlineKeyboardButton(
                                        f"{'–°–Ω—è—Ç—å' if player_title.is_active else '–ù–∞–¥–µ—Ç—å'} {title.name}",
                                        callback_data=f"title_toggle_{player_title.id}"
                                    )
                                )

                            if new_titles:
                                response_text += "\nüéâ –ü–æ–ª—É—á–µ–Ω—ã –Ω–æ–≤—ã–µ —Ç–∏—Ç—É–ª—ã:\n"
                                for title in new_titles:
                                    response_text += f"- {title.name}\n"

                            await message.answer(response_text, reply_markup=keyboard)

                        @dp.callback_query_handler(lambda c: c.data.startswith('title_toggle_'),
                                                   state=GameStates.main_menu)
                        async def toggle_title(callback_query: types.CallbackQuery):
                            title_id = int(callback_query.data.split('_')[2])
                            session = Session()

                            # –ü–æ–ª—É—á–∞–µ–º —Ç–∏—Ç—É–ª –∏–≥—Ä–æ–∫–∞
                            player_title = session.query(PlayerTitle).get(title_id)
                            if not player_title:
                                await callback_query.answer("–û—à–∏–±–∫–∞: —Ç–∏—Ç—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                                return

                            # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–∏—Ç—É–ª, –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ
                            if not player_title.is_active:
                                other_active_titles = session.query(PlayerTitle).filter_by(
                                    player_id=player_title.player_id,
                                    is_active=True
                                ).all()

                                for other_title in other_active_titles:
                                    other_title.is_active = False

                            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ç–∏—Ç—É–ª–∞
                            player_title.is_active = not player_title.is_active
                            session.commit()

                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∏—Ç—É–ª–∞–º–∏
                            await show_titles(callback_query.message)
                            await callback_query.answer(
                                f"–¢–∏—Ç—É–ª {'–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' if player_title.is_active else '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'}!"
                            )

                        # –î–æ–±–∞–≤–ª—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ PvP —Ä–∞–Ω–≥
                        async def give_daily_rank_rewards():
                            """–í—ã–¥–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ PvP —Ä–∞–Ω–≥"""
                            session = Session()
                            players = session.query(Player).all()

                            for player in players:
                                rank = get_player_rank(player.pvp_rating)
                                daily_batons = rank.get('daily_batons', 0)

                                if daily_batons > 0:
                                    player.batons += daily_batons

                                    try:
                                        await bot.send_message(
                                            player.user_id,
                                            f"üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ PvP —Ä–∞–Ω–≥ {rank['name']}:\n"
                                            f"ü•ñ +{daily_batons} –±–∞—Ç–æ–Ω–æ–≤"
                                        )
                                    except:
                                        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è

                            session.commit()

                        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –≤—ã–¥–∞—á–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥
                        async def schedule_rank_rewards():
                            while True:
                                now = datetime.utcnow()
                                next_day = (now + timedelta(days=1)).replace(
                                    hour=0, minute=0, second=0, microsecond=0
                                )
                                await asyncio.sleep((next_day - now).total_seconds())
                                await give_daily_rank_rewards()

                        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥
                        def start_scheduler():
                            loop = asyncio.get_event_loop()
                            loop.create_task(schedule_rank_rewards())

                        # –°–∏—Å—Ç–µ–º–∞ –ø–∏—Ç–æ–º—Ü–µ–≤
                        class Pet(Base):
                            __tablename__ = 'pets'
                            id = Column(Integer, primary_key=True)
                            name = Column(String)
                            type = Column(String)  # dragon, wolf, cat, etc.
                            rarity = Column(String)  # common, rare, epic, legendary
                            base_damage = Column(Integer)
                            base_defense = Column(Integer)
                            base_health = Column(Integer)
                            special_ability = Column(String)
                            evolution_level = Column(Integer, default=1)
                            max_evolution_level = Column(Integer)
                            image = Column(String)

                        class PlayerPet(Base):
                            __tablename__ = 'player_pets'
                            id = Column(Integer, primary_key=True)
                            player_id = Column(Integer, ForeignKey('players.id'))
                            pet_id = Column(Integer, ForeignKey('pets.id'))
                            nickname = Column(String, nullable=True)
                            level = Column(Integer, default=1)
                            experience = Column(Integer, default=0)
                            happiness = Column(Integer, default=100)  # 0-100
                            hunger = Column(Integer, default=0)  # 0-100
                            last_fed = Column(DateTime, default=datetime.utcnow)
                            is_active = Column(Boolean, default=False)
                            bonus_stats = Column(JSON, default={})  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã –æ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫

                            pet = relationship("Pet")
                            player = relationship("Player")

                            def get_total_stats(self) -> Dict[str, int]:
                                """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–∏—Ç–æ–º—Ü–∞ —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è –∏ –±–æ–Ω—É—Å–æ–≤"""
                                level_multiplier = 1 + (self.level - 1) * 0.1

                                return {
                                    'damage': int(
                                        self.pet.base_damage * level_multiplier + self.bonus_stats.get('damage', 0)),
                                    'defense': int(
                                        self.pet.base_defense * level_multiplier + self.bonus_stats.get('defense', 0)),
                                    'health': int(
                                        self.pet.base_health * level_multiplier + self.bonus_stats.get('health', 0))
                                }

                            def add_experience(self, amount: int) -> bool:
                                """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–ø—ã—Ç –ø–∏—Ç–æ–º—Ü—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è"""
                                self.experience += amount
                                level_up = False

                                while self.experience >= self.get_next_level_exp():
                                    self.level += 1
                                    level_up = True

                                return level_up

                            def get_next_level_exp(self) -> int:
                                """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç—Ä–µ–±—É–µ–º—ã–π –æ–ø—ã—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è"""
                                return int(100 * (self.level ** 1.5))

                            def update_status(self):
                                """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–∏—Ç–æ–º—Ü–∞ (–≥–æ–ª–æ–¥ –∏ —Å—á–∞—Å—Ç—å–µ)"""
                                hours_since_fed = (datetime.utcnow() - self.last_fed).total_seconds() / 3600

                                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≥–æ–ª–æ–¥ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
                                self.hunger = min(100, self.hunger + int(hours_since_fed * 5))

                                # –£–º–µ–Ω—å—à–∞–µ–º —Å—á–∞—Å—Ç—å–µ, –µ—Å–ª–∏ –ø–∏—Ç–æ–º–µ—Ü –≥–æ–ª–æ–¥–µ–Ω
                                if self.hunger > 50:
                                    happiness_loss = int((self.hunger - 50) * 0.5)
                                    self.happiness = max(0, self.happiness - happiness_loss)

                        @dp.message_handler(lambda message: message.text == "üêæ –ü–∏—Ç–æ–º—Ü—ã", state=GameStates.main_menu)
                        async def show_pets(message: types.Message):
                            session = Session()
                            player = session.query(Player).filter_by(user_id=message.from_user.id).first()

                            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–∏—Ç–æ–º—Ü–µ–≤ –∏–≥—Ä–æ–∫–∞
                            player_pets = session.query(PlayerPet).filter_by(player_id=player.id).all()

                            if not player_pets:
                                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
                                keyboard = types.InlineKeyboardMarkup()
                                starter_pets = session.query(Pet).filter_by(rarity='common').all()

                                for pet in starter_pets:
                                    keyboard.add(types.InlineKeyboardButton(
                                        f"–í—ã–±—Ä–∞—Ç—å {pet.name}",
                                        callback_data=f"choose_starter_pet_{pet.id}"
                                    ))

                                await message.answer(
                                    "üêæ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∏—Ç–æ–º–Ω–∏–∫!\n"
                                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤. –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞:",
                                    reply_markup=keyboard
                                )
                                return

                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∏—Ç–æ–º—Ü–∞—Ö
                            response_text = "üêæ –í–∞—à–∏ –ø–∏—Ç–æ–º—Ü—ã:\n\n"
                            keyboard = types.InlineKeyboardMarkup(row_width=2)

                            for player_pet in player_pets:
                                pet = player_pet.pet
                                player_pet.update_status()
                                stats = player_pet.get_total_stats()

                                status = "‚úÖ" if player_pet.is_active else "‚≠ï"
                                nickname = player_pet.nickname or pet.name

                                response_text += (
                                    f"{status} {nickname} ({pet.type})\n"
                                    f"‚îú –£—Ä–æ–≤–µ–Ω—å: {player_pet.level} ({player_pet.experience}/{player_pet.get_next_level_exp()} –æ–ø—ã—Ç–∞)\n"
                                    f"‚îú –†–µ–¥–∫–æ—Å—Ç—å: {pet.rarity}\n"
                                    f"‚îú –≠–≤–æ–ª—é—Ü–∏—è: {pet.evolution_level}/{pet.max_evolution_level}\n"
                                    f"‚îú –°—á–∞—Å—Ç—å–µ: {'‚ù§Ô∏è' * (player_pet.happiness // 20)}{'üñ§' * ((100 - player_pet.happiness) // 20)}\n"
                                    f"‚îú –ì–æ–ª–æ–¥: {'üçñ' * (player_pet.hunger // 20)}{'‚ö™' * ((100 - player_pet.hunger) // 20)}\n"
                                    f"‚îú –£—Ä–æ–Ω: {stats['damage']}\n"
                                    f"‚îú –ó–∞—â–∏—Ç–∞: {stats['defense']}\n"
                                    f"‚îî –ó–¥–æ—Ä–æ–≤—å–µ: {stats['health']}\n\n"
                                )

                                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–µ–º
                                pet_buttons = [
                                    types.InlineKeyboardButton(
                                        f"{'–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' if player_pet.is_active else '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'}",
                                        callback_data=f"pet_toggle_{player_pet.id}"
                                    ),
                                    types.InlineKeyboardButton(
                                        "–ü–æ–∫–æ—Ä–º–∏—Ç—å",
                                        callback_data=f"pet_feed_{player_pet.id}"
                                    )
                                ]
                                keyboard.add(*pet_buttons)

                                keyboard.add(types.InlineKeyboardButton(
                                    f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å {nickname}",
                                    callback_data=f"pet_train_{player_pet.id}"
                                ))

                                if pet.evolution_level < pet.max_evolution_level:
                                    keyboard.add(types.InlineKeyboardButton(
                                        f"–≠–≤–æ–ª—é—Ü–∏—è {nickname}",
                                        callback_data=f"pet_evolve_{player_pet.id}"
                                    ))

                            keyboard.add(types.InlineKeyboardButton(
                                "üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω –ø–∏—Ç–æ–º—Ü–µ–≤",
                                callback_data="pet_shop"
                            ))

                            session.commit()
                            await message.answer(response_text, reply_markup=keyboard)

                        @dp.callback_query_handler(lambda c: c.data.startswith('choose_starter_pet_'))
                        async def process_starter_pet_choice(callback_query: types.CallbackQuery):
                            pet_id = int(callback_query.data.split('_')[3])
                            session = Session()

                            player = session.query(Player).filter_by(user_id=callback_query.from_user.id).first()
                            pet = session.query(Pet).get(pet_id)

                            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞
                            player_pet = PlayerPet(
                                player_id=player.id,
                                pet_id=pet_id,
                                is_active=True
                            )
                            session.add(player_pet)
                            session.commit()

                            await callback_query.message.edit_text(
                                f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–∏—Ç–æ–º—Ü–∞ {pet.name}!\n"
                                "–£—Ö–∞–∂–∏–≤–∞–π—Ç–µ –∑–∞ –Ω–∏–º, –∫–æ—Ä–º–∏—Ç–µ –∏ —Ç—Ä–µ–Ω–∏—Ä—É–π—Ç–µ, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ —Å–∏–ª—å–Ω–µ–µ."
                            )

                        @dp.callback_query_handler(lambda c: c.data.startswith('pet_toggle_'))
                        async def toggle_pet(callback_query: types.CallbackQuery):
                            pet_id = int(callback_query.data.split('_')[2])
                            session = Session()

                            player_pet = session.query(PlayerPet).get(pet_id)
                            if not player_pet:
                                await callback_query.answer("–û—à–∏–±–∫–∞: –ø–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                                return

                            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤
                            if not player_pet.is_active:
                                other_active_pets = session.query(PlayerPet).filter_by(
                                    player_id=player_pet.player_id,
                                    is_active=True
                                ).all()

                                for other_pet in other_active_pets:
                                    other_pet.is_active = False

                            player_pet.is_active = not player_pet.is_active
                            session.commit()

                            await show_pets(callback_query.message)
                            await callback_query.answer(
                                f"–ü–∏—Ç–æ–º–µ—Ü {'–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' if player_pet.is_active else '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'}!"
                            )

                        @dp.callback_query_handler(lambda c: c.data.startswith('pet_feed_'))
                        async def feed_pet(callback_query: types.CallbackQuery):
                            pet_id = int(callback_query.data.split('_')[2])
                            session = Session()

                            player = session.query(Player).filter_by(user_id=callback_query.from_user.id).first()
                            player_pet = session.query(PlayerPet).get(pet_id)

                            if player.batons < 10:
                                await callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞—Ç–æ–Ω–æ–≤ –¥–ª—è –∫–æ—Ä–º–ª–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞!")
                                return

                            player.batons -= 10
                            player_pet.hunger = max(0, player_pet.hunger - 50)
                            player_pet.happiness = min(100, player_pet.happiness + 20)
                            player_pet.last_fed = datetime.utcnow()

                            session.commit()

                            await show_pets(callback_query.message)
                            await callback_query.answer("–ü–∏—Ç–æ–º–µ—Ü –Ω–∞–∫–æ—Ä–º–ª–µ–Ω!")

                        @dp.callback_query_handler(lambda c: c.data.startswith('pet_train_'))
                        async def show_training_options(callback_query: types.CallbackQuery):
                            pet_id = int(callback_query.data.split('_')[2])
                            session = Session()

                            player = session.query(Player).filter_by(user_id=callback_query.from_user.id).first()
                            player_pet = session.query(PlayerPet).get(pet_id)

                            if not player_pet:
                                await callback_query.answer("–û—à–∏–±–∫–∞: –ø–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                                return

                            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
                            keyboard = types.InlineKeyboardMarkup(row_width=1)
                            training_options = [
                                ("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∞—Ç–∞–∫–∏ (20 ü•ñ)", "damage", 20),
                                ("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞—â–∏—Ç—ã (20 ü•ñ)", "defense", 20),
                                ("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è (20 ü•ñ)", "health", 20)
                            ]

                            for name, stat, cost in training_options:
                                keyboard.add(types.InlineKeyboardButton(
                                    name,
                                    callback_data=f"pet_train_stat_{pet_id}_{stat}_{cost}"
                                ))

                            keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="pet_back"))

                            stats = player_pet.get_total_stats()
                            bonus_stats = player_pet.bonus_stats

                            await callback_query.message.edit_text(
                                f"üéØ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø–∏—Ç–æ–º—Ü–∞ {player_pet.nickname or player_pet.pet.name}\n\n"
                                f"–¢–µ–∫—É—â–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n"
                                f"‚öîÔ∏è –£—Ä–æ–Ω: {stats['damage']} (+{bonus_stats.get('damage', 0)} –æ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫)\n"
                                f"üõ°Ô∏è –ó–∞—â–∏—Ç–∞: {stats['defense']} (+{bonus_stats.get('defense', 0)} –æ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫)\n"
                                f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {stats['health']} (+{bonus_stats.get('health', 0)} –æ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫)\n\n"
                                f"–£ –≤–∞—Å –µ—Å—Ç—å: {player.batons} ü•ñ",
                                reply_markup=keyboard
                            )

                        @dp.callback_query_handler(lambda c: c.data.startswith('pet_train_stat_'))
                        async def train_pet_stat(callback_query: types.CallbackQuery):
                            _, _, _, pet_id, stat, cost = callback_query.data.split('_')
                            pet_id, cost = int(pet_id), int(cost)

                            session = Session()
                            player = session.query(Player).filter_by(user_id=callback_query.from_user.id).first()
                            player_pet = session.query(PlayerPet).get(pet_id)

                            if player.batons < cost:
                                await callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞—Ç–æ–Ω–æ–≤ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!")
                                return

                            # –°–ø–∏—Å—ã–≤–∞–µ–º –±–∞—Ç–æ–Ω—ã
                            player.batons -= cost

                            # –û–±–Ω–æ–≤–ª—è–µ–º –±–æ–Ω—É—Å–Ω—ã–µ —Å—Ç–∞—Ç—ã –ø–∏—Ç–æ–º—Ü–∞
                            if not player_pet.bonus_stats:
                                player_pet.bonus_stats = {}

                            current_bonus = player_pet.bonus_stats.get(stat, 0)
                            gain = random.randint(1, 3)  # –°–ª—É—á–∞–π–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∞

                            if player_pet.happiness < 50:  # –£–º–µ–Ω—å—à–∞–µ–º –ø—Ä–∏—Ä–æ—Å—Ç –ø—Ä–∏ –Ω–∏–∑–∫–æ–º —Å—á–∞—Å—Ç—å–µ
                                gain = max(1, gain // 2)

                            player_pet.bonus_stats[stat] = current_bonus + gain

                            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç –ø–∏—Ç–æ–º—Ü—É
                            level_up = player_pet.add_experience(random.randint(10, 20))

                            session.commit()

                            result_text = f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞! +{gain} –∫ {stat}"
                            if level_up:
                                result_text += f"\nüéâ –ü–∏—Ç–æ–º–µ—Ü –¥–æ—Å—Ç–∏–≥ {player_pet.level} —É—Ä–æ–≤–Ω—è!"

                            await callback_query.answer(result_text)
                            await show_training_options(callback_query)

                        @dp.callback_query_handler(lambda c: c.data.startswith('pet_evolve_'))
                        async def show_evolution_confirm(callback_query: types.CallbackQuery):
                            pet_id = int(callback_query.data.split('_')[2])
                            session = Session()

                            player_pet = session.query(PlayerPet).get(pet_id)
                            pet = player_pet.pet

                            if pet.evolution_level >= pet.max_evolution_level:
                                await callback_query.answer("–ü–∏—Ç–æ–º–µ—Ü —É–∂–µ –¥–æ—Å—Ç–∏–≥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç–≤–æ–ª—é—Ü–∏–∏!")
                                return

                            # –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è —ç–≤–æ–ª—é—Ü–∏–∏
                            required_level = pet.evolution_level * 10
                            required_batons = pet.evolution_level * 100

                            keyboard = types.InlineKeyboardMarkup()
                            keyboard.add(
                                types.InlineKeyboardButton(
                                    "‚ú® –≠–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å",
                                    callback_data=f"pet_evolution_confirm_{pet_id}"
                                )
                            )
                            keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="pet_back"))

                            await callback_query.message.edit_text(
                                f"‚ú® –≠–≤–æ–ª—é—Ü–∏—è –ø–∏—Ç–æ–º—Ü–∞ {player_pet.nickname or pet.name}\n\n"
                                f"–¢–µ–∫—É—â–∞—è —ç–≤–æ–ª—é—Ü–∏—è: {pet.evolution_level}/{pet.max_evolution_level}\n\n"
                                f"–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è —ç–≤–æ–ª—é—Ü–∏–∏:\n"
                                f"- –£—Ä–æ–≤–µ–Ω—å –ø–∏—Ç–æ–º—Ü–∞: {player_pet.level}/{required_level}\n"
                                f"- –ë–∞—Ç–æ–Ω—ã: {required_batons} ü•ñ\n\n"
                                f"–ü–æ—Å–ª–µ —ç–≤–æ–ª—é—Ü–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–∏—Ç–æ–º—Ü–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–∞—Ç—Å—è!",
                                reply_markup=keyboard
                            )

                        @dp.callback_query_handler(lambda c: c.data.startswith('pet_evolution_confirm_'))
                        async def evolve_pet(callback_query: types.CallbackQuery):
                            pet_id = int(callback_query.data.split('_')[3])
                            session = Session()

                            player = session.query(Player).filter_by(user_id=callback_query.from_user.id).first()
                            player_pet = session.query(PlayerPet).get(pet_id)
                            pet = player_pet.pet

                            required_level = pet.evolution_level * 10
                            required_batons = pet.evolution_level * 100

                            if player_pet.level < required_level:
                                await callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–∏—Ç–æ–º—Ü–∞!")
                                return

                            if player.batons < required_batons:
                                await callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞—Ç–æ–Ω–æ–≤!")
                                return

                            # –ü—Ä–æ–≤–æ–¥–∏–º —ç–≤–æ–ª—é—Ü–∏—é
                            player.batons -= required_batons
                            pet.evolution_level += 1

                            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                            evolution_multiplier = 1.5
                            pet.base_damage = int(pet.base_damage * evolution_multiplier)
                            pet.base_defense = int(pet.base_defense * evolution_multiplier)
                            pet.base_health = int(pet.base_health * evolution_multiplier)

                            session.commit()

                            await callback_query.message.edit_text(
                                f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ü–∏—Ç–æ–º–µ—Ü {player_pet.nickname or pet.name} —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–ª!\n"
                                f"–ù–æ–≤–∞—è —ç–≤–æ–ª—é—Ü–∏—è: {pet.evolution_level}/{pet.max_evolution_level}\n\n"
                                f"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —É–ª—É—á—à–µ–Ω—ã –≤ {evolution_multiplier}x —Ä–∞–∑!"
                            )

                        @dp.callback_query_handler(lambda c: c.data == "pet_shop")
                        async def show_pet_shop(callback_query: types.CallbackQuery):
                            session = Session()
                            player = session.query(Player).filter_by(user_id=callback_query.from_user.id).first()

                            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
                            available_pets = session.query(Pet).filter(
                                Pet.evolution_level == 1,  # –¢–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –ø–∏—Ç–æ–º—Ü—ã
                                Pet.id.notin_([pp.pet_id for pp in player.pets])  # –ò—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –∏–º–µ—é—â–∏—Ö—Å—è
                            ).all()

                            if not available_pets:
                                await callback_query.message.edit_text(
                                    "üè™ –ú–∞–≥–∞–∑–∏–Ω –ø–∏—Ç–æ–º—Ü–µ–≤ –ø—É—Å—Ç!\n"
                                    "–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –ø–æ–∑–∂–µ, –∫–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –ø–∏—Ç–æ–º—Ü—ã."
                                )
                                return

                            response_text = (
                                "üè™ –ú–∞–≥–∞–∑–∏–Ω –ø–∏—Ç–æ–º—Ü–µ–≤\n"
                                f"–£ –≤–∞—Å –µ—Å—Ç—å: {player.batons} ü•ñ\n\n"
                                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∏—Ç–æ–º—Ü—ã:\n"
                            )

                            keyboard = types.InlineKeyboardMarkup(row_width=1)

                            for pet in available_pets:
                                price = {
                                    'common': 100,
                                    'rare': 300,
                                    'epic': 1000,
                                    'legendary': 5000
                                }.get(pet.rarity, 100)

                                response_text += (
                                    f"\n{pet.name} ({pet.type})\n"
                                    f"‚îú –†–µ–¥–∫–æ—Å—Ç—å: {pet.rarity}\n"
                                    f"‚îú –£—Ä–æ–Ω: {pet.base_damage}\n"
                                    f"‚îú –ó–∞—â–∏—Ç–∞: {pet.base_defense}\n"
                                    f"‚îú –ó–¥–æ—Ä–æ–≤—å–µ: {pet.base_health}\n"
                                    f"‚îî –¶–µ–Ω–∞: {price} ü•ñ\n"
                                )

                                keyboard.add(types.InlineKeyboardButton(
                                    f"–ö—É–ø–∏—Ç—å {pet.name} –∑–∞ {price} ü•ñ",
                                    callback_data=f"pet_buy_{pet.id}_{price}"
                                ))

                            keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="pet_back"))

                            await callback_query.message.edit_text(
                                response_text,
                                reply_markup=keyboard
                            )

                        @dp.callback_query_handler(lambda c: c.data.startswith('pet_buy_'))
                        async def buy_pet(callback_query: types.CallbackQuery):
                            _, _, pet_id, price = callback_query.data.split('_')
                            pet_id, price = int(pet_id), int(price)

                            session = Session()
                            player = session.query(Player).filter_by(user_id=callback_query.from_user.id).first()
                            pet = session.query(Pet).get(pet_id)

                            if player.batons < price:
                                await callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞—Ç–æ–Ω–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–∏—Ç–æ–º—Ü–∞!")
                                return

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ —É –∏–≥—Ä–æ–∫–∞
                            existing_pet = session.query(PlayerPet).filter_by(
                                player_id=player.id,
                                pet_id=pet_id
                            ).first()

                            if existing_pet:
                                await callback_query.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ç–∞–∫–æ–π –ø–∏—Ç–æ–º–µ—Ü!")
                                return

                            # –ü–æ–∫—É–ø–∞–µ–º –ø–∏—Ç–æ–º—Ü–∞
                            player.batons -= price
                            new_pet = PlayerPet(
                                player_id=player.id,
                                pet_id=pet_id,
                                is_active=False  # –ù–æ–≤—ã–π –ø–∏—Ç–æ–º–µ—Ü –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                            )
                            session.add(new_pet)
                            session.commit()

                            await callback_query.message.edit_text(
                                f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π –ø–∏—Ç–æ–º—Ü–∞ {pet.name}!\n"
                                f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {price} ü•ñ"
                            )

                            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–∏—Ç–æ–º—Ü–µ–≤
                            class PetAbility(Base):
                                __tablename__ = 'pet_abilities'
                                id = Column(Integer, primary_key=True)
                                name = Column(String)
                                description = Column(String)
                                type = Column(String)  # combat, support, passive
                                effect = Column(JSON)  # {type: value} –Ω–∞–ø—Ä–∏–º–µ—Ä {"heal": 20, "damage": 30}
                                cooldown = Column(Integer)  # –≤ —Ä–∞—É–Ω–¥–∞—Ö –¥–ª—è –±–æ—è
                                energy_cost = Column(Integer)
                                required_evolution = Column(Integer, default=1)

                            # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π —Å –ø–∏—Ç–æ–º—Ü–∞–º–∏
                            Pet.abilities = relationship("PetAbility", secondary="pet_ability_links")

                            class PetAbilityLink(Base):
                                __tablename__ = 'pet_ability_links'
                                pet_id = Column(Integer, ForeignKey('pets.id'), primary_key=True)
                                ability_id = Column(Integer, ForeignKey('pet_abilities.id'), primary_key=True)

                            @dp.callback_query_handler(lambda c: c.data.startswith('pet_abilities_'))
                            async def show_pet_abilities(callback_query: types.CallbackQuery):
                                pet_id = int(callback_query.data.split('_')[2])
                                session = Session()

                                player_pet = session.query(PlayerPet).get(pet_id)
                                pet = player_pet.pet

                                response_text = f"‚ú® –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–∏—Ç–æ–º—Ü–∞ {player_pet.nickname or pet.name}:\n\n"

                                for ability in pet.abilities:
                                    if ability.required_evolution <= pet.evolution_level:
                                        response_text += (
                                            f"üîÆ {ability.name}\n"
                                            f"‚îú –¢–∏–ø: {ability.type}\n"
                                            f"‚îú {ability.description}\n"
                                            f"‚îú –ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞: {ability.cooldown} —Ö–æ–¥–æ–≤\n"
                                            f"‚îî –≠–Ω–µ—Ä–≥–∏—è: {ability.energy_cost}\n\n"
                                        )

                                keyboard = types.InlineKeyboardMarkup()
                                keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="pet_back"))

                                await callback_query.message.edit_text(
                                    response_text,
                                    reply_markup=keyboard
                                )

                            # –°–∏—Å—Ç–µ–º–∞ –ø–∏—Ç–æ–º—Ü–µ–≤-–∫–æ–º–ø–∞–Ω—å–æ–Ω–æ–≤ –¥–ª—è –ø–æ–¥–∑–µ–º–µ–ª–∏–π
                            class DungeonPetEffect:
                                def __init__(self, player_pet: PlayerPet):
                                    self.player_pet = player_pet
                                    self.ability_cooldowns = {}

                                def apply_passive_effects(self, player_stats: dict) -> dict:
                                    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø–∞—Å—Å–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –ø–∏—Ç–æ–º—Ü–∞ –∫ —Å—Ç–∞—Ç–∞–º –∏–≥—Ä–æ–∫–∞"""
                                    pet_stats = self.player_pet.get_total_stats()

                                    # –ë–∞–∑–æ–≤–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
                                    player_stats['damage'] += int(pet_stats['damage'] * 0.2)
                                    player_stats['defense'] += int(pet_stats['defense'] * 0.2)
                                    player_stats['health'] += int(pet_stats['health'] * 0.2)

                                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Å—Å–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
                                    for ability in self.player_pet.pet.abilities:
                                        if ability.type == 'passive' and ability.required_evolution <= self.player_pet.pet.evolution_level:
                                            for stat, value in ability.effect.items():
                                                if stat in player_stats:
                                                    player_stats[stat] += value

                                    return player_stats

                                def use_combat_ability(self, battle_state: dict) -> tuple[str, dict]:
                                    """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–æ–µ–≤—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø–∏—Ç–æ–º—Ü–∞"""
                                    available_abilities = [
                                        ability for ability in self.player_pet.pet.abilities
                                        if ability.type == 'combat'
                                           and ability.required_evolution <= self.player_pet.pet.evolution_level
                                           and self.ability_cooldowns.get(ability.id, 0) <= 0
                                    ]

                                    if not available_abilities:
                                        return "", battle_state

                                    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
                                    ability = random.choice(available_abilities)
                                    self.ability_cooldowns[ability.id] = ability.cooldown

                                    effect_text = f"üîÆ –ü–∏—Ç–æ–º–µ—Ü {self.player_pet.nickname or self.player_pet.pet.name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç {ability.name}!\n"

                                    # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
                                    if 'damage' in ability.effect:
                                        damage = ability.effect['damage']
                                        battle_state['monster_hp'] -= damage
                                        effect_text += f"‚öîÔ∏è –ù–∞–Ω–µ—Å–µ–Ω–æ {damage} —É—Ä–æ–Ω–∞!\n"

                                    if 'heal' in ability.effect:
                                        heal = ability.effect['heal']
                                        battle_state['player_hp'] = min(
                                            battle_state['player_hp'] + heal,
                                            battle_state['player_max_hp']
                                        )
                                        effect_text += f"üíö –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {heal} –∑–¥–æ—Ä–æ–≤—å—è!\n"

                                    return effect_text, battle_state

                                def update_cooldowns(self):
                                    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫—É —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π"""
                                    for ability_id in list(self.ability_cooldowns.keys()):
                                        self.ability_cooldowns[ability_id] = max(0,
                                                                                 self.ability_cooldowns[ability_id] - 1)

                            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É –±–æ—è –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ —Å —É—á–µ—Ç–æ–º –ø–∏—Ç–æ–º—Ü–µ–≤
                            async def dungeon_battle(player: Player, monster: Monster, session) -> Dict:
                                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –∏–≥—Ä–æ–∫–∞
                                player_pet = session.query(PlayerPet).filter_by(
                                    player_id=player.id,
                                    is_active=True
                                ).first()

                                pet_effect = DungeonPetEffect(player_pet) if player_pet else None

                                # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å—Ç–∞—Ç—ã –∏–≥—Ä–æ–∫–∞
                                player_stats = player.get_total_stats(session)

                                # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –ø–∏—Ç–æ–º—Ü–∞
                                if pet_effect:
                                    player_stats = pet_effect.apply_passive_effects(player_stats)

                                battle_state = {
                                    'player_hp': player_stats['health'],
                                    'player_max_hp': player_stats['health'],
                                    'monster_hp': monster.health,
                                    'monster_max_hp': monster.health
                                }

                                battle_log = []
                                rounds = 0

                                while battle_state['player_hp'] > 0 and battle_state['monster_hp'] > 0 and rounds < 20:
                                    # –•–æ–¥ –∏–≥—Ä–æ–∫–∞
                                    player_damage = max(1, player_stats['damage'] - monster.defense // 2)
                                    crit_chance = random.random() < (player_stats['critical_chance'] / 100)

                                    if crit_chance:
                                        player_damage *= 2
                                        battle_log.append(
                                            f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä! {player.name} –Ω–∞–Ω–æ—Å–∏—Ç {player_damage} —É—Ä–æ–Ω–∞!")
                                    else:
                                        battle_log.append(f"‚öîÔ∏è {player.name} –Ω–∞–Ω–æ—Å–∏—Ç {player_damage} —É—Ä–æ–Ω–∞!")

                                    battle_state['monster_hp'] -= player_damage

                                    # –•–æ–¥ –ø–∏—Ç–æ–º—Ü–∞
                                    if pet_effect and battle_state['monster_hp'] > 0:
                                        pet_action, battle_state = pet_effect.use_combat_ability(battle_state)
                                        if pet_action:
                                            battle_log.append(pet_action)

                                    # –•–æ–¥ –º–æ–Ω—Å—Ç—Ä–∞
                                    if battle_state['monster_hp'] > 0:
                                        monster_damage = max(1, monster.damage - player_stats['defense'] // 2)
                                        dodge_chance = random.random() < (player_stats['dodge_chance'] / 100)

                                        if dodge_chance:
                                            battle_log.append(f"üåü {player.name} —É–∫–ª–æ–Ω—è–µ—Ç—Å—è –æ—Ç –∞—Ç–∞–∫–∏!")
                                        else:
                                            battle_state['player_hp'] -= monster_damage
                                            battle_log.append(f"üó°Ô∏è {monster.name} –Ω–∞–Ω–æ—Å–∏—Ç {monster_damage} —É—Ä–æ–Ω–∞!")

                                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É–ª–¥–∞—É–Ω—ã —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –ø–∏—Ç–æ–º—Ü–∞
                                    if pet_effect:
                                        pet_effect.update_cooldowns()

                                    rounds += 1

                                victory = battle_state['player_hp'] > 0

                                return {
                                    'victory': victory,
                                    'remaining_hp': battle_state['player_hp'],
                                    'battle_log': battle_log,
                                    'rounds': rounds
                                }

                                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–∏—Ç–≤—ã –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ
                                async def process_dungeon_rewards(player: Player, dungeon: Dungeon, session) -> Dict:
                                    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–æ–¥–∑–µ–º–µ–ª—å—è"""
                                    rewards = {
                                        'experience': random.randint(100, 200) * dungeon.min_level,
                                        'batons': random.randint(50, 100) * dungeon.min_level,
                                        'items': [],
                                        'level_up': False
                                    }

                                    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
                                    level_before = player.level
                                    level_up = player.add_experience(rewards['experience'])
                                    rewards['level_up'] = level_up

                                    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞—Ç–æ–Ω—ã
                                    player.batons += rewards['batons']

                                    # –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã –ø–∏—Ç–æ–º—Ü—É, –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π
                                    active_pet = session.query(PlayerPet).filter_by(
                                        player_id=player.id,
                                        is_active=True
                                    ).first()

                                    if active_pet:
                                        pet_exp = int(rewards['experience'] * 0.5)  # 50% –æ—Ç –æ–ø—ã—Ç–∞ –∏–≥—Ä–æ–∫–∞
                                        active_pet.add_experience(pet_exp)
                                        active_pet.happiness = min(100, active_pet.happiness + 10)

                                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ –¥–æ–±—ã—á–∏ –ø–æ–¥–∑–µ–º–µ–ª—å—è
                                    if dungeon.possible_loot:
                                        for item_id, chance in dungeon.possible_loot.items():
                                            if random.random() < chance:
                                                item = session.query(Item).get(item_id)
                                                if item:
                                                    quantity = random.randint(1, 3)
                                                    existing_item = session.query(Inventory).filter_by(
                                                        player_id=player.id,
                                                        item_id=item_id
                                                    ).first()

                                                    if existing_item:
                                                        existing_item.quantity += quantity
                                                    else:
                                                        new_item = Inventory(
                                                            player_id=player.id,
                                                            item_id=item_id,
                                                            quantity=quantity
                                                        )
                                                        session.add(new_item)

                                                    rewards['items'].append(f"{item.name} x{quantity}")

                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                                    session.commit()
                                    return rewards

                                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–∑–µ–º–µ–ª—å—è
                                async def update_dungeon_stats(player: Player, dungeon: Dungeon, completion_time: float,
                                                               session):
                                    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ–¥–∑–µ–º–µ–ª—å—è"""
                                    stats = session.query(DungeonStats).filter_by(
                                        player_id=player.id,
                                        dungeon_id=dungeon.id
                                    ).first()

                                    if not stats:
                                        stats = DungeonStats(
                                            player_id=player.id,
                                            dungeon_id=dungeon.id,
                                            times_completed=0,
                                            fastest_time=None,
                                            total_time=0
                                        )
                                        session.add(stats)

                                    stats.times_completed += 1
                                    stats.total_time += completion_time

                                    if stats.fastest_time is None or completion_time < stats.fastest_time:
                                        stats.fastest_time = completion_time

                                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∫–æ—Ä–¥ –ø–æ–¥–∑–µ–º–µ–ª—å—è
                                        current_record = session.query(DungeonRecord).filter_by(
                                            dungeon_id=dungeon.id
                                        ).first()

                                        if not current_record or completion_time < current_record.completion_time:
                                            new_record = DungeonRecord(
                                                dungeon_id=dungeon.id,
                                                player_id=player.id,
                                                completion_time=completion_time,
                                                achieved_at=datetime.utcnow()
                                            )
                                            session.add(new_record)

                                            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –æ –Ω–æ–≤–æ–º —Ä–µ–∫–æ—Ä–¥–µ
                                            await bot.send_message(
                                                player.user_id,
                                                f"üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –Ω–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ–¥–∑–µ–º–µ–ª—å—è {dungeon.name}!\n"
                                                f"–í—Ä–µ–º—è: {completion_time:.2f} —Å–µ–∫—É–Ω–¥"
                                            )

                                    session.commit()

                                # –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–¥–∑–µ–º–µ–ª—å—è
                                async def complete_dungeon(callback_query: types.CallbackQuery, player: Player,
                                                           dungeon: Dungeon,
                                                           progress: DungeonProgress, session):
                                    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–¥–∑–µ–º–µ–ª—å—è"""
                                    completion_time = datetime.utcnow().timestamp() - progress.current_progress[
                                        'start_time']

                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
                                    if completion_time > dungeon.completion_time * 60:
                                        await callback_query.message.edit_text(
                                            "‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –í—ã –Ω–µ —É—Å–ø–µ–ª–∏ –ø—Ä–æ–π—Ç–∏ –ø–æ–¥–∑–µ–º–µ–ª—å–µ.\n"
                                            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–∑–µ–º–µ–ª—å—è."
                                        )
                                        await GameStates.main_menu.set()
                                        return

                                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã
                                    rewards = await process_dungeon_rewards(player, dungeon, session)

                                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                                    await update_dungeon_stats(player, dungeon, completion_time, session)

                                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–≥—Ä–∞–¥—ã
                                    reward_text = (
                                        f"üéâ –ü–æ–¥–∑–µ–º–µ–ª—å–µ {dungeon.name} –ø—Ä–æ–π–¥–µ–Ω–æ!\n\n"
                                        f"‚è±Ô∏è –í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: {completion_time:.2f} —Å–µ–∫—É–Ω–¥\n"
                                        f"üëø –ü–æ–±–µ–∂–¥–µ–Ω–æ –º–æ–Ω—Å—Ç—Ä–æ–≤: {progress.current_progress['monsters_defeated']}\n\n"
                                        f"–ù–∞–≥—Ä–∞–¥—ã:\n"
                                        f"‚ú® –û–ø—ã—Ç: {rewards['experience']}\n"
                                        f"ü•ñ –ë–∞—Ç–æ–Ω—ã: {rewards['batons']}\n"
                                    )

                                    if rewards['items']:
                                        reward_text += f"\nüì¶ –î–æ–±—ã—á–∞:\n" + "\n".join(
                                            [f"- {item}" for item in rewards['items']])

                                    if rewards['level_up']:
                                        reward_text += f"\n\nüéä –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ {player.level} —É—Ä–æ–≤–Ω—è!"

                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                                    await check_achievements(player, session, {
                                        'dungeon_completed': dungeon.id,
                                        'monsters_killed': progress.current_progress['monsters_defeated'],
                                        'dungeon_time': completion_time
                                    })

                                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–¥–∑–µ–º–µ–ª—å—è
                                    progress.current_progress = None
                                    session.commit()

                                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
                                    await callback_query.message.edit_text(reward_text)
                                    await GameStates.main_menu.set()

                                    # –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö –∑–¥–µ—Å—å

                                    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
                                    def register_handlers(dp: Dispatcher):
                                        dp.callback_query_handler(lambda c: c.data.startswith('pet_toggle_'))(
                                            toggle_pet)
                                        dp.callback_query_handler(lambda c: c.data.startswith('pet_feed_'))(feed_pet)
                                        dp.callback_query_handler(lambda c: c.data.startswith('pet_train_'))(
                                            show_training_options)
                                        dp.callback_query_handler(lambda c: c.data.startswith('pet_train_stat_'))(
                                            train_pet_stat)
                                        dp.callback_query_handler(lambda c: c.data.startswith('pet_evolve_'))(
                                            show_evolution_confirm)
                                        dp.callback_query_handler(
                                            lambda c: c.data.startswith('pet_evolution_confirm_'))(evolve_pet)
                                        dp.callback_query_handler(lambda c: c.data == "pet_shop")(show_pet_shop)
                                        dp.callback_query_handler(lambda c: c.data.startswith('pet_buy_'))(buy_pet)
                                        dp.callback_query_handler(lambda c: c.data.startswith('pet_abilities_'))(
                                            show_pet_abilities)
                                        dp.callback_query_handler(lambda c: c.data.startswith('choose_starter_pet_'))(
                                            process_starter_pet_choice)

                                        # –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
                                        # –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–¥–∑–µ–º–µ–ª–∏–π, –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ

                                    if __name__ == "__main__":
                                        from aiogram import executor
                                        from app.handlers import register_handlers

                                        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                                        engine = create_engine(DATABASE_URL, echo=True)
                                        Session = sessionmaker(bind=engine)
                                        Base.metadata.create_all(engine)

                                        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
                                        bot = Bot(token=API_TOKEN)
                                        storage = MemoryStorage()
                                        dp = Dispatcher(bot, storage=storage)

                                        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
                                        register_handlers(dp)

                                        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
                                        executor.start_polling(dp, on_startup=on_startup)
